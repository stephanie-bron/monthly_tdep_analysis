{

//// Needed: rc (negative int) dec (double), nTrials (int)

  bool RELOAD;

  if (!RELOAD) {
    
    
    RELOAD = true;
    gROOT->Macro("$LAB_MAIN_DIR/llhTimeDep/loadlibs.C");
    if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

    //initialize_ran1(rs);
    if (1) { initialize_ran1(-35); } // seed has to be a *NEGATIVE* integer
    else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
    int ranSeed = get_ran1_seed(); // if you want to know what the seed was
    
    int rs = ranSeed;
    
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/ic79/ArkTime.C");
    
    gROOT->ProcessLine(".L TreeLoader_IC79_Final.C");
    gROOT->ProcessLine(".L TreeLoader_IC59_Final.C");
    gROOT->ProcessLine(".L TreeLoader_IC40_CutA6_Fix_final.C");
    
    gROOT->ProcessLine(".L mpfSigmaDegRescaledIC79V2.C+");
    gROOT->ProcessLine(".L mpfSigmaDegRescaledIC59.C+");
    gROOT->ProcessLine(".L mpfSigmaDegRescaled2.C+");
    
    int nTrials = 40;

    bool OPT_USEREALDATA = false;

//    I3Ark ark22;
//    gROOT->ProcessLine(".x load_ark_ic22.C(ark22, OPT_USEREALDATA)");

    I3Ark ark40;
    gROOT->ProcessLine(".x load_ark_ic40.C(ark40, OPT_USEREALDATA)");

    I3Ark ark59;
    //gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    //gROOT->ProcessLine(".x load_ark_ic59_bugfix.C(ark59, OPT_USEREALDATA)");
    gROOT->ProcessLine(".x load_ark_ic59_BDT.C(ark59, OPT_USEREALDATA)");
    
    I3Ark ark79;
    //gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    gROOT->ProcessLine(".x load_ark_ic79_Final.C(ark79, OPT_USEREALDATA)");

    MultiArk mark;
    //mark.AddArk(ark22);
    mark.AddArk(ark40);
    mark.AddArk(ark59);
    mark.AddArk(ark79);
    
    MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
    
    double monLev = 0.;
    double period = 5.6; //in days
    double t0 = 0.; // in MJD
    
    //bool jT = false; double nd = 4.;
    bool jT = true; double nd = 3.;

    NewLlhPeriodicTime newllh40;
    newllh40.SetUseEnergy(true);
    //newllh40.SetOptimizeAngleDeg(6.);
    newllh40.SetOptimizeTolerance(0.01);
    newllh40.SetMonitorLevel(monLev);
    newllh40.SetEMaxRatioWarnOnlyOnce(1);
    newllh40.close_ = 10.;
    newllh40.JimsTerm_ = jT; newllh40.ndof_ = nd;
    newllh40.SpectralPenalty_ = false;
    newllh40.SetLivetime(1.);
    //    newllh40.SetAnalysisSet(ark40.psData);
    newllh40.SetTimePeriodic(period,t0);
    //newllh40.SetLocalCoordBkgProb(ark40.lcBkgProb);

    NewLlhPeriodicTime newllh59;
    newllh59.SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(6.);
    newllh59.SetOptimizeTolerance(0.01);
    newllh59.SetMonitorLevel(monLev);
    newllh59.SetEMaxRatioWarnOnlyOnce(1);
    newllh59.close_ = 10.;5
    newllh59.JimsTerm_ = jT;
    newllh59.SpectralPenalty_ = false;
    newllh59.ndof_ = nd;
    newllh59.SetLivetime(1.);
//    newllh59.SetAnalysisSet(ark59.psData);
    newllh59.SetTimePeriodic(period,t0);
    //newllh59.SetLocalCoordBkgProb(ark59.lcBkgProb);
    
    NewLlhPeriodicTime newllh79;
    newllh79.SetUseEnergy(true);
    //newllh79.SetOptimizeAngleDeg(6.);
    newllh79.SetOptimizeTolerance(0.01);
    newllh79.SetMonitorLevel(monLev);
    newllh79.SetEMaxRatioWarnOnlyOnce(1);
    newllh79.close_ = 10.;
    newllh79.JimsTerm_ = jT;
    newllh79.SpectralPenalty_ = false;
    newllh79.ndof_ = nd;
    newllh79.SetLivetime(1.);
//    newllh59.SetAnalysisSet(ark59.psData);
    newllh79.SetTimePeriodic(period,t0);
    //newllh59.SetLocalCoordBkgProb(ark59.lcBkgProb);
      
    MultiPeriodicAnalysisFn maf;
    //maf.AddAnalysisFn(&newllh22);
    maf.AddAnalysisFn(&newllh40);
    maf.AddAnalysisFn(&newllh59);
    maf.AddAnalysisFn(&newllh79);
    maf.SetTimePeriodic(period,t0);
    maf.seedWtMin = 2000.; // (WAS 10)
        
    //gSystem->ProcessLine(".L mqso.teststat.10k.nts.root");
    //maf.SetNullTestStat(hTestStatistic);
  
    gROOT->ProcessLine(".L SimpleMultiPeriodicAnalysis.C");
  
  }

  //EquatorialDeg testSearch(153.375, 11.375);
  EquatorialDeg testSearch(343.491,16.148);
  
  TimePdf * tPdf = new GaussianTimePdf(0., 1., 0.5,1e-1,1.);

  newllh40.SetAnalysis(ark40.psData, testSearch);
  newllh59.SetAnalysis(ark59.psData, testSearch);
  newllh79.SetAnalysis(ark79.psData, testSearch);
  
  
  mark.SetPointSource(testSearch, PowerLawFlux(1.,-2.), tPdf);
  maf.SetSearchCoord(testSearch);

  //MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
  
  NewLlhPeriodicTime_ParTranslator pt;
  pt.SetRange(1,4,31);
  pt.SetTranslator(mas);
  
  maf.SetParTranslator(&pt);

  
TTree t1("gaustest","");
double azBest;
double ira, idec, ilogl, iestp, ins, igamma, imean, isigma, imfactor, iazBest, imeanGuess, isigmaGuess;
int inevs;
t1.Branch("ra",   &ira,   "ra/D");
t1.Branch("dec",  &idec,  "dec/D");
t1.Branch("logl", &ilogl, "logl/D");
t1.Branch("estp", &iestp, "estp/D");
t1.Branch("ns",   &ins,   "ns/D");
t1.Branch("gamma",&igamma,"gamma/D");
//t1.Branch("mfactor", &imfactor,"mfactor/D");
t1.Branch("nevs", &inevs, "nevs/I");
t1.Branch("mean", &imean, "mean/D");
t1.Branch("sigma",&isigma,"sigma/D");
//t1.Branch("azBest",&iazBest,"azBest/D");
t1.Branch("meanGuess", &imeanGuess, "meanGuess/D");
t1.Branch("sigmaGuess",&isigmaGuess,"sigmaGuess/D");
    
      
    CountMonitor countMon(10.,nTrials);
    for (int i=0;i<nTrials;i++) {
    
      mark.psData->GenerateDataSet_with_nSrcEvents(0);
      //newllh59.SetAnalysis(ark59.psData,testSearch);
      maf.MaximizeLlh();
           
      ira = ra;
      idec = declination;
      
      ilogl=maf.Get_logLambdaBest();
      iestp=maf.GetEstProb();      
      ins=maf.GetPar(0);
      igamma=maf.GetPar(1);
      imean=maf.GetPar(2);
      imeanGuess=maf.Get_meanGuess();
      isigma=pow(10,maf.GetPar(3));
      isigmaGuess=maf.Get_sigmaGuess();
      //imfactor=newllh59->GetBlocksThreshold();
      inevs=maf.Get_nevs();
      //iazBest=azBest;
      t1.Fill();
      countMon.UpdateCount();
      
    }
    
//  }


  char grsave[100];
  int n
  n=sprintf(grsave,"mqso/stresstest/%dseed.%dk.root",-1.0*rs,nTrials/1000);
  t1.SaveAs(grsave);

    
//  newllh59.SetMonitorLevel(4);
//  newllh59.EvaluateLlh(newllh59.GetPar(0),newllh59.GetPar(1),newllh59.GetPar(2),newllh59.GetPar(3));
   
  //cout << "Starting trials" << endl;
  //sa.Execute(ark59,newllh59,1,0);


  /*
  // Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  gROOT->ProcessLine(".L SetDisco.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
   SetDisco(disco, 10, false, 2.87e-7, 0.5);

  gROOT->ProcessLine(".L DetectionStudy.C");
 
  TCanvas *c = DetectionStudy(ark59, newllh59, disco); //*/

  /* Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  
  gROOT->ProcessLine(".L SetDisco.C");
  gROOT->ProcessLine(".L DetectionStudy.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
  // SetDisco(disco, 15, false, 2.87e-7, 0.5);
   SetDisco(disco, 15, true, 0.5, 0.9);
  
  cout << "setting sigmas" << endl;
  double n_disco[16], ldsigmas[16];
  double dsigmas[] = {1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 3e-1, 1., 3., 10, 1e2, 4e2, 8e2};
  //double boxsigmas[] = { 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 3e-1, 1., 3., 10, 1e2, 375. };
  
  double tmean;
  
  for (int i=0;i<16;i++) {
    
    //tmean = (ark59.tmax+ark59.tmin)/2. - boxsigmas[i]/2.;
    TimePdf * tPdf = new GaussianTimePdf(ark59.tmin, ark59.tmax, 55230.,dsigmas[i],1.);
    //TimePdf * tPdf = new SpikeTimePdf(ark59.tmin, ark59.tmax, tmean,tmean+boxsigmas[i],1.,0.);
    ark59.SetPointSource(testSearch, PowerLawFlux(1.,spectralIndex), tPdf);
    ark59.psData.GetSource().SetTimeAzBins( ark59.lcBkgProb.nbAz );
    newllh59.SetTimeBounds(tPdf);
  
    n_disco[i] = DetectionStudy_d(ark59, newllh59, disco);
    
    //ldsigmas[i] = log10(boxsigmas[i]);    cout << boxsigmas[i] << " " << n_disco[i] << endl;
    ldsigmas[i] = log10(dsigmas[i]);     cout << dsigmas[i] << " " << n_disco[i] << endl;
  
  }
  
  TGraph * g = new TGraph(16,ldsigmas,n_disco);
  g->Draw("AL"); //*/
  
  //gROOT->ProcessLine(".L DetectionZenith.C");

  //DetectionZenith dz;
  //dz.searchDecDegMin = -85.;   //(skip any bins beyond this range);
  //dz.searchDecDegMax = +85.;   //(skip any bins beyond this range);
  //dz.nBins = 40;

  //dz.Execute(ark59, newllh59, disco, PowerLawFlux(1,spectralIndex));
  
  
//  dz.Write("IC59_SC_Zenith.root","recreate");
//  dz.Write("IC59_SCutB4_noIT_Zenith_discoEm2.root","recreate");
//  dz.Write("IC59_SCutB4_noIT_Zenith_sensEm1p5.root","recreate");
//  dz.Write("IC59_SCutB4_Zenith_sensEm1p5.root","recreate");

  //dz.Write("IC59_discovery.root","recreate");

 
  return 1; // signal correct finish of script
}
