{
    
    bool RELOAD;
    
    if (!RELOAD) {
        RELOAD = true;
        gROOT->Macro("$LAB_MAIN_DIR/llh/loadlibs.C");
        if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.
        
        //  TString macroPath = gROOT->GetMacroPath();
        //  macroPath += gSystem->ExpandPathName("$LAB_MAIN_DIR/macro_llh:");
        //  gROOT->SetMacroPath(macroPath);
        gROOT->ProcessLine(".L MilagroFluxCalculator.C");
        
        if (1) { initialize_ran1(-55); } // seed has to be a *NEGATIVE* integer
        else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
        int ranSeed = get_ran1_seed(); // if you want to know what the seed was
        
        gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/ic79/Ark.C");
        
        bool OPT_USEREALDATA = false;
        
        gROOT->ProcessLine(".L mpfSigmaDegRescaledIC79Sirin.C+");
        gROOT->ProcessLine(".L mpfSigmaDegRescaledIC59.C+");
	gROOT->ProcessLine(".L RescaledSigma_IC86_MuEX.C+");
	gROOT->ProcessLine(".L RescaledSigma_IC86_SplineMPE.C++");
	gROOT->ProcessLine(".L RescaledSigma_IC86_MPE.C+");
        
	gROOT->ProcessLine(".L TreeLoader_IC86.C");
        gROOT->ProcessLine(".L TreeLoader_IC79_Final.C");
        gROOT->ProcessLine(".L TreeLoader_IC59_Final.C");

	// Photon Flux
	double fluxNorm_g; // TeV^-1 cm^-2 s^-1, at Energy eNorm_g;
	double energyNorm_g;    // TeV
	double alpha_g;    // (positive) spectral index
	double energyCut_g;     // TeV

  //    fluxNorm_g = k_g * (energyNorm_g)^{-alpha_g} *
  //                 exp( -sqrt( energyNorm_g / energyCut_g ) )
        
        //    I3Ark ark22;
        //    gROOT->ProcessLine(".x load_ark_ic22.C(ark22, OPT_USEREALDATA)");
        
        //I3Ark ark40;
        //gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/ic59/load_ark_ic40_2075.C(ark40, OPT_USEREALDATA)");
        //gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/ic59/load_ark_ic40.C(ark40, OPT_USEREALDATA)");
        
        I3Ark ark59;
        gROOT->ProcessLine(".x load_ark_ic59_BDT.C(ark59, OPT_USEREALDATA)");
        
        I3Ark ark79;
        gROOT->ProcessLine(".x load_ark_ic79_Sirin.C(ark79, OPT_USEREALDATA)");
	
	I3Ark ark86;
	TString RecoName = "SplineMPE";
	gROOT->ProcessLine(".x load_ark_ic86_BDT.C(ark86, OPT_USEREALDATA, RecoName)");
        
        //gROOT->ProcessLine(".L AllSky.C");
        //AllSky as;
        //as.SetRange(148, 158, 5, 15);
        
        MultiArk mark;
        //mark.AddArk(ark22);
        //mark.AddArk(ark40);
        mark.AddArk(ark59);
        mark.AddArk(ark79);
	mark.AddArk(ark86);
        
        MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
        
        int monLev = 0;
        
        // Specific to Milagro6:
        printf("Setting up Stacking Analysis Sources (6 Milagro SNR Sources)...\n");
        printf("Spectra are fit on the fly from Halzen, Kappes, O'Murchada (2008)\n");
        
        
        bool OPT_LOADSIGNAL = true;
        //I3MultiSignalGenerator msg40;
        I3MultiSignalGenerator msg59;
        I3MultiSignalGenerator msg79;
	I3MultiSignalGenerator msg86;
        vector<I3Event> sourceEvents;
        if (OPT_LOADSIGNAL) {
            vector<double> enhancementFactors;
            enhancementFactors.clear();
            // Set theoretical flux enhancment factors from gamma flux
            //  for signal generation.
            // E.g. an enhancment factor of 2 will inject twice as much flux from that
            //  source as from any other source.
            
            for (int i=0; i<6; i++) {
                // For the theoretical spectra, the differences in flux are built
                //  directly into the flux fits of Halzen, Kappes, O'Murchada's
                //  simulated spectral data directly.
                // Just give 1.0 for each source here.
                enhancementFactors.push_back(1.);
            }
        }
        
        // Set source sizes, used both for signal generation and spatial pdf
        vector<double> srcSigmas;
        srcSigmas.clear();
        for (int i=0; i<6; i++) { // Treat most as point sources
            srcSigmas.push_back(0.0); // Exceptions follow...
        }
        // Exceptions: ("Extent Diameter" taken as sigma to 2D circular Gaussian)
        srcSigmas[0] = 0.64; // MGRO J2019+37
        srcSigmas[1] = 1.3; //MGRO 1908+06 
        srcSigmas[2] = 1.5; // MGRO J2031+41
        srcSigmas[3] = 1.0; // MGRO J2043+36
        vector<EquatorialDeg> srcLocations;
        srcLocations.clear();
        
        
        // Each Ark has its own event loader.  Each ark needs its own msg...
        //  (I.e. its own list of candidate source events)
        //EventLoaderExt evLoader40 = dynamic_cast<const EventLoaderExt&>(ark40.evLoader);
        //evLoader40.SetNUpSamples(20); // Default number of times each signal event is moved
        EventLoaderExt evLoader59 = dynamic_cast<const EventLoaderExt&>(ark59.evLoader);
        evLoader59.SetNUpSamples(20); // Default number of times each signal event is moved
        EventLoaderExt evLoader79 = dynamic_cast<const EventLoaderExt&>(ark79.evLoader);
        evLoader79.SetNUpSamples(20); // Default number of times each signal event is moved
        EventLoaderExt evLoader86 = dynamic_cast<const EventLoaderExt&>(ark86.evLoader);
        evLoader86.SetNUpSamples(20); // Default number of times each signal event is moved	
        int srcIndex = 0;
        
        // Source 0
        //                         r.a.,  dec.
        //EquatorialDeg srcLocation14(305.22,36.83);  // Fermi position
        //EquatorialDeg srcLocation0(305.03,36.72);  // MGRO J2019+37, Original
        EquatorialDeg srcLocation0(304.68,36.70);  // MGRO J2019+37, Updated
        srcLocations.push_back(srcLocation0);
        char *sourceName = "MGRO J2019+37"; // required in "FitMilagroSpectra"
        //gROOT->ProcessLine(".x FitMilagroSpectra.C");
        //double params[3];
        //fCutoffLog->GetParameters(params); // from "FitMilagroSpectra"
        //TF1 *f2019 = new TF1("fCutoff","pow(10,[0]+[1]*log10(x)-pow(10,log10(x))/pow(10,[2])*log10(exp(1)))",1.e2,1.e5);
        //f2019->SetParameters(params);
	  fluxNorm_g = 8.7e-15.;
	  energyNorm_g = 20.;
	  alpha_g = 2.;
	  energyCut_g = 29.;

	    FormulaFlux fluxMGRO_J2019 = MilagroFluxCalculator_nu(fluxNorm_g, energyNorm_g, alpha_g, energyCut_g);
	    double weight2019 = fluxNorm_g; // params[0] is log(norm)
        if (OPT_LOADSIGNAL) {
            //FormulaFlux formflux2019(*f2019);
	    //PowerLawFlux pflux2019(1,-2); 
            FluxBase *myFluxPtr2019 = &fluxMGRO_J2019;
            //evLoader40.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            //evLoader40.LoadSourceEvents(sourceEvents);
            //I3PointGenerator i3point(sourceEvents, *myFluxPtr2019, srcLocation0, ark40.livetime);
            //msg40.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader59.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader59.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2019, srcLocation0, ark59.livetime);
            msg59.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2019, srcLocation0, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader86.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader86.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2019, srcLocation0, ark86.livetime);
            msg86.AddSignal(i3point,enhancementFactors[srcIndex]);	    
        }
        srcIndex++;
        
        
        // Source 1
        //EquatorialDeg srcLocation1(286.89,6.03);  // Fermi position
        //EquatorialDeg srcLocation1(287.27,6.18);  // MGRO J1908+06, Original
        EquatorialDeg srcLocation1(286.68,5.83);  // MGRO J1908+06, Updated
        srcLocations.push_back(srcLocation1);
        char *sourceName = "MGRO J1908+06";
        //gROOT->ProcessLine(".x FitMilagroSpectra.C");
        //double params[3];
        //fCutoffLog->GetParameters(params); // from "FitMilagroSpectra"
        //TF1 *f1908 = new TF1("fCutoff","pow(10,[0]+[1]*log10(x)-pow(10,log10(x))/pow(10,[2])*log10(exp(1)))",1.e2,1.e5);
        //1908->SetParameters(params);
	
	// MGRO J1908+06
	  fluxNorm_g = 8.8e-15.;
	  energyNorm_g = 20;
	  alpha_g = 2.;
	  energyCut_g = 24.;

	  FormulaFlux fluxMGRO_J1908 = MilagroFluxCalculator_nu(fluxNorm_g, energyNorm_g, alpha_g, energyCut_g);
	  //EquatorialDeg srcMGRO_J1908( 287.27 , 6.28 );

        double weight1908 = fluxNorm_g; // params[0] is log(norm)
        if (OPT_LOADSIGNAL) {
            //FormulaFlux formflux1908(*f1908);
            //PowerLawFlux pflux1908(1,-2); 
	    FluxBase *myFluxPtr1908 = &fluxMGRO_J1908;
            //evLoader40.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            //evLoader40.LoadSourceEvents(sourceEvents);
            //I3PointGenerator i3point(sourceEvents, *myFluxPtr1908, srcLocation1, ark40.livetime);
            //msg40.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader59.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader59.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr1908, srcLocation1, ark59.livetime);
            msg59.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr1908, srcLocation1, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader86.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader86.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr1908, srcLocation1, ark86.livetime);
            msg86.AddSignal(i3point,enhancementFactors[srcIndex]);	
        }
        srcIndex++;
        
        // Source 2
        //???? MGRO J2034+41 on Jim's page
        //EquatorialDeg srcLocation2(308.06,41.38);  // TeV 2032+41 (assoc with J2031+42)
        //EquatorialDeg srcLocation2(308.04,41.57);  // MGRO J2031+41, Original

	
        EquatorialDeg srcLocation2(307.93,40.67);  // MGRO J2031+41, Updated
        srcLocations.push_back(srcLocation2);
        char *sourceName = "MGRO J2031+42"; // 41 some places?
        //gROOT->ProcessLine(".x FitMilagroSpectra.C");
        //double params[3];
        //fCutoffLog->GetParameters(params); // from "FitMilagroSpectra"
        //TF1 *f2031 = new TF1("fCutoff","pow(10,[0]+[1]*log10(x)-pow(10,log10(x))/pow(10,[2])*log10(exp(1)))",1.e2,1.e5);
        //f2031->SetParameters(params);
	  
	  fluxNorm_g = 9.8e-15.;
	  energyNorm_g = 20;
	  alpha_g = 2.7;
	  energyCut_g = 44.;

	  FormulaFlux fluxMGRO_J2031 = MilagroFluxCalculator_nu(fluxNorm_g, energyNorm_g, alpha_g, energyCut_g);
	
        double weight2031 = fluxNorm_g; // params[0] is log(norm)
        if (OPT_LOADSIGNAL) {
            //FormulaFlux formflux2031(*f2031);
	    //PowerLawFlux pflux2031(1,-2); 
            FluxBase *myFluxPtr2031 = &fluxMGRO_J2031;
            //evLoader40.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            //evLoader40.LoadSourceEvents(sourceEvents);
            //I3PointGenerator i3point(sourceEvents, *myFluxPtr2031, srcLocation2, ark40.livetime);
            //msg40.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader59.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader59.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2031, srcLocation2, ark59.livetime);
            msg59.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2031, srcLocation2, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader86.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader86.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2031, srcLocation2, ark86.livetime);
            msg86.AddSignal(i3point,enhancementFactors[srcIndex]);	    
        }
        srcIndex++;
        
        // Source 3
        EquatorialDeg srcLocation3(310.98,36.3);  // C1 (MGRO J2043+36)
        srcLocations.push_back(srcLocation3);
        char *sourceName = "MGRO J2043+36";
        //gROOT->ProcessLine(".x FitMilagroSpectra.C");
        //double params[3];
        //fCutoffLog->GetParameters(params); // from "FitMilagroSpectra"
        //TF1 *f2043= new TF1("fCutoff","pow(10,[0]+[1]*log10(x)-pow(10,log10(x))/pow(10,[2])*log10(exp(1)))",1.e2,1.e5);
        //f2043->SetParameters(params);
	
	fluxNorm_g = 3.1e-15;
	energyNorm_g = 20;
	alpha_g = 2.;
	energyCut_g = 31.;

	FormulaFlux fluxMGRO_J2043 = MilagroFluxCalculator_nu(fluxNorm_g, energyNorm_g, alpha_g, energyCut_g);
	//EquatorialDeg srcMGRO_J2019( 304.83 , 36.83 );
	
        double weight2043 = fluxNorm_g; // params[0] is log(norm)
        if (OPT_LOADSIGNAL) {
            //FormulaFlux formflux2043(*f2043);
            //PowerLawFlux pflux2043(1,-2); 
	    FluxBase *myFluxPtr2043 = &fluxMGRO_J2043;
            //evLoader40.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            //evLoader40.LoadSourceEvents(sourceEvents);
            //I3PointGenerator i3point(sourceEvents, *myFluxPtr2043, srcLocation3, ark40.livetime);
            //msg40.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader59.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader59.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2043, srcLocation3, ark59.livetime);
            msg59.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2043, srcLocation3, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader86.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader86.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2043, srcLocation3, ark86.livetime);
            msg86.AddSignal(i3point,enhancementFactors[srcIndex]);   
        }
        srcIndex++;
        
        // Source 4
        EquatorialDeg srcLocation4(307.75,36.52);  // C2 (MGRO J2032+37)
        srcLocations.push_back(srcLocation4);
        char *sourceName = "MGRO J2032+37";
        //gROOT->ProcessLine(".x FitMilagroSpectra.C");
        //double params[3];
        //fCutoffLog->GetParameters(params); // from "FitMilagroSpectra"
        //TF1 *f2032= new TF1("fCutoff","pow(10,[0]+[1]*log10(x)-pow(10,log10(x))/pow(10,[2])*log10(exp(1)))",1.e2,1.e5);
        //f2032->SetParameters(params);
	
	fluxNorm_g = 3.4e-15.;
	energyNorm_g = 20.;
	alpha_g = 2.;
	energyCut_g = 31.;

	FormulaFlux fluxMGRO_J2032 = MilagroFluxCalculator_nu(fluxNorm_g, energyNorm_g, alpha_g, energyCut_g);
	
        double weight2032 = fluxNorm_g; // params[0] is log(norm)
        if (OPT_LOADSIGNAL) {
            //FormulaFlux formflux2032(*f2032);
	    //PowerLawFlux pflux2032(1,-2); 
            FluxBase *myFluxPtr2032= &fluxMGRO_J2032;
            //evLoader40.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            //evLoader40.LoadSourceEvents(sourceEvents);
            //I3PointGenerator i3point(sourceEvents, *myFluxPtr2032, srcLocation4, ark40.livetime);
            //msg40.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader59.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader59.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2032, srcLocation4, ark59.livetime);
            msg59.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2032, srcLocation4, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
	    evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr2032, srcLocation4, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
        }
        srcIndex++;
        
        // Source 5, added to v2 of Francis's paper, in the text it states that
        //  it has a flux about 2.5 times that of J2019+37 (next-brightest)
        EquatorialDeg srcLocation5(283.12,0.51);  // MGRO J1852+01
        srcLocations.push_back(srcLocation5);
        char *sourceName = "MGRO J1852+01";
        //gROOT->ProcessLine(".x FitMilagroSpectra.C");
        //double params[3];
        //fCutoffLog->GetParameters(params); // from "FitMilagroSpectra"
        //TF1 *f1852= new TF1("fCutoff","pow(10,[0]+[1]*log10(x)-pow(10,log10(x))/pow(10,[2])*log10(exp(1)))",1.e2,1.e5);
        //f1852->SetParameters(params);
	
	fluxNorm_g = 5.7e-14.;
	energyNorm_g = 12.;
	alpha_g = 2.;
	energyCut_g = 31.;

	FormulaFlux fluxMGRO_J1852 = MilagroFluxCalculator_nu(fluxNorm_g, energyNorm_g, alpha_g, energyCut_g);
	
        double weight1852 = weight2019*2.5.; // params[0] is log(norm)
        if (OPT_LOADSIGNAL) {
            //FormulaFlux formflux1852(*f1852);
	    //PowerLawFlux pflux1852(1,-2); 
            FluxBase *myFluxPtr1852 = &fluxMGRO_J1852;
            //evLoader40.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            //evLoader40.LoadSourceEvents(sourceEvents);
            //I3PointGenerator i3point(sourceEvents, *myFluxPtr1852, srcLocation5, ark40.livetime);
            //msg40.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader59.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader59.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr1852, srcLocation5, ark59.livetime);
            msg59.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader79.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader79.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr1852, srcLocation5, ark79.livetime);
            msg79.AddSignal(i3point,enhancementFactors[srcIndex]);
            evLoader86.LoadSourcePdf_Kent(srcLocations[srcIndex], srcSigmas[srcIndex]);
            evLoader86.LoadSourceEvents(sourceEvents);
            I3PointGenerator i3point(sourceEvents, *myFluxPtr1852, srcLocation5, ark86.livetime);
            msg86.AddSignal(i3point,enhancementFactors[srcIndex]);	    
        }
        srcIndex++;
        
        // ... finished adding sources
        
        //I3SignalGenerator *mySignalPtr40 = &msg40;
        //SourceModule *srcMod40 = mySignalPtr40; // one more base class deep
        
        I3SignalGenerator *mySignalPtr59 = &msg59;
        SourceModule *srcMod59 = mySignalPtr59;
        
        I3SignalGenerator *mySignalPtr79 = &msg79;
        SourceModule *srcMod79 = mySignalPtr79;
	
	I3SignalGenerator *mySignalPtr86 = &msg86;
        SourceModule *srcMod86 = mySignalPtr86;
        
        
        // CALCULATE STACKING WEIGHTS VS GAMMA TABLE
        // Set theoretical bias, i.e. if you have reason to believe one source emits
        //  a higher flux, add that enhancement factor here and the stacking search
        //  will use that enhancement factor to construct the signal spatial pdfs
        //  e.g., if you believe one source emits twice as much flux as another, the
        //  srcWeightsArray will scale that source pdf up by a factor of 2 if set here.
        //  (It will not inject more flux, such as setting the enhancement factor
        //   of the I3PointGenerator)
        
        vector<double> pdfEnhancement;
        pdfEnhancement.clear();
        if (1) { // For equal weights
            for (int i=0; i<6; i++) {
                pdfEnhancement.push_back(1./6.); // Identical, i.e. no src enhancments
            }
        }
        if (0) { // Use norms from fits to theoretical spectra
            double weightSum = weight2019 + weight1908 + weight2031 + weight2043 +
            weight2032 + weight1852;
            pdfEnhancement.push_back(weight2019/weightSum);
            pdfEnhancement.push_back(weight1908/weightSum);
            pdfEnhancement.push_back(weight2031/weightSum);
            pdfEnhancement.push_back(weight2043/weightSum);
            pdfEnhancement.push_back(weight2032/weightSum);
            pdfEnhancement.push_back(weight1852/weightSum);
        }
        
        // At least make sure these are the same length as number of sources
        assert ( srcSigmas.size() == srcLocations.size() ); // else misconfigured
        assert ( enhancementFactors.size() == srcLocations.size() ); // else misconfigured
        assert ( pdfEnhancement.size() == srcLocations.size() ); // else misconfigured
        
        cout << "\nCalculating Stacking Weight vs Gamma Tables...\n ";
        
        double gammaMin = -4;
        double gammaMax = -1;
        int nGammaBins  = 30;
        
        
        /*vector<vector<double> > srcWeightsArray40;
        int vSize = srcLocations.size();
        srcWeightsArray40.resize( vSize );
        double srcWeight=0, testGamma=0;
        for (int srcIndex=0; srcIndex < srcLocations.size(); srcIndex++) {
            
            evLoader40.LoadSourceEvents(sourceEvents, srcLocations[srcIndex]);
            
            for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
                double testGamma = (gammaIndex+0.5)*(gammaMax-gammaMin)/nGammaBins + gammaMin;
                PowerLawFlux testFlux(1,testGamma);  //  1 GeV^-1 cm^-2 s^-1;  index = testGamma
                FluxBase *myFluxPtr = &testFlux;
                
                I3PointGenerator i3point(sourceEvents, *myFluxPtr, srcLocations[srcIndex], ark40.livetime);
                srcWeight = i3point->GetMeanSrcNev();
                //srcWeight = 1;
                //cout <<srcIndex<<"  "<<gammaIndex<<"  "
                //     <<testGamma<<"  "<<srcWeight*pdfEnhancement[srcIndex]<< endl;
                srcWeightsArray40[srcIndex].push_back(srcWeight*pdfEnhancement[srcIndex]);
            }
            
        }
        
        // Normalize each row for sanity's sake (stacking method does not require this)
        cout << endl;
        cout << "Normalized table of Src Weights for different gamma:" << endl;
        cout << "x-axis = Source Index, y-axis = gamma index (soft to hard)"<<endl;
        cout << endl;
        for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
            printf("%02d:  ",gammaIndex);
            //cout << gammaIndex << ": ";
            double sumRow = 0;
            // Find norm constant
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                sumRow += srcWeightsArray40[srcIndex][gammaIndex];
            }
            // And normalize
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                srcWeightsArray40[srcIndex][gammaIndex]/=sumRow;
                printf("%.4f ",srcWeightsArray40[srcIndex][gammaIndex]);
            }
            
            cout << endl;
            
        }*/
        
        vector<vector<double> > srcWeightsArray59;
        int vSize = srcLocations.size();
        srcWeightsArray59.resize( vSize );
        double srcWeight=0, testGamma=0;
        for (int srcIndex=0; srcIndex < srcLocations.size(); srcIndex++) {
            
            evLoader59.LoadSourceEvents(sourceEvents, srcLocations[srcIndex]);
            
            for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
                double testGamma = (gammaIndex+0.5)*(gammaMax-gammaMin)/nGammaBins + gammaMin;
                PowerLawFlux testFlux(1,testGamma);  //  1 GeV^-1 cm^-2 s^-1;  index = testGamma
                FluxBase *myFluxPtr = &testFlux;
                
                I3PointGenerator i3point(sourceEvents, *myFluxPtr, srcLocations[srcIndex], ark59.livetime);
                srcWeight = i3point->GetMeanSrcNev();
                //srcWeight = 1;
                //cout <<sfluxNorm_grcIndex<<"  "<<gammaIndex<<"  "
                //     <<testGamma<<"  "<<srcWeight*pdfEnhancement[srcIndex]<< endl;
                srcWeightsArray59[srcIndex].push_back(srcWeight*pdfEnhancement[srcIndex]);
            }
            
        }
        
        // Normalize each row for sanity's sake (stacking method does not require this)
        cout << endl;
        cout << "Normalized table of Src Weights for different gamma:" << endl;
        cout << "x-axis = Source Index, y-axis = gamma index (soft to hard)"<<endl;
        cout << endl;
        for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
            printf("%02d:  ",gammaIndex);
            //cout << gammaIndex << ": ";
            double sumRow = 0;
            // Find norm constant
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                sumRow += srcWeightsArray59[srcIndex][gammaIndex];
            }
            // And normalize
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                srcWeightsArray59[srcIndex][gammaIndex]/=sumRow;
                printf("%.4f ",srcWeightsArray59[srcIndex][gammaIndex]);
            }
            
            cout << endl;
            
        }
        vector<vector<double> > srcWeightsArray79;
        int vSize = srcLocations.size();
        srcWeightsArray79.resize( vSize );
        double srcWeight=0, testGamma=0;
        for (int srcIndex=0; srcIndex < srcLocations.size(); srcIndex++) {
            
            evLoader79.LoadSourceEvents(sourceEvents, srcLocations[srcIndex]);
            
            for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
                double testGamma = (gammaIndex+0.5)*(gammaMax-gammaMin)/nGammaBins + gammaMin;
                PowerLawFlux testFlux(1,testGamma);  //  1 GeV^-1 cm^-2 s^-1;  index = testGamma
                FluxBase *myFluxPtr = &testFlux;
                
                I3PointGenerator i3point(sourceEvents, *myFluxPtr, srcLocations[srcIndex], ark79.livetime);
                srcWeight = i3point->GetMeanSrcNev();
                //srcWeight = 1;
                //cout <<srcIndex<<"  "<<gammaIndex<<"  "
                //     <<testGamma<<"  "<<srcWeight*pdfEnhancement[srcIndex]<< endl;
                srcWeightsArray79[srcIndex].push_back(srcWeight*pdfEnhancement[srcIndex]);
            }
            
        }
        
        // Normalize each row for sanity's sake (stacking method does not require this)
        cout << endl;
        cout << "Normalized table of Src Weights for different gamma:" << endl;
        cout << "x-axis = Source Index, y-axis = gamma index (soft to hard)"<<endl;
        cout << endl;
        for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
            printf("%02d:  ",gammaIndex);
            //cout << gammaIndex << ": ";
            double sumRow = 0;
            // Find norm constant
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                sumRow += srcWeightsArray79[srcIndex][gammaIndex];
            }
            // And normalize
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                srcWeightsArray79[srcIndex][gammaIndex]/=sumRow;
                printf("%.4f ",srcWeightsArray79[srcIndex][gammaIndex]);
            }
            
            cout << endl;
            
        }

        vector<vector<double> > srcWeightsArray86;
        int vSize = srcLocations.size();
        srcWeightsArray86.resize( vSize );
        double srcWeight=0, testGamma=0;
        for (int srcIndex=0; srcIndex < srcLocations.size(); srcIndex++) {
            
            evLoader86.LoadSourceEvents(sourceEvents, srcLocations[srcIndex]);
            
            for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
                double testGamma = (gammaIndex+0.5)*(gammaMax-gammaMin)/nGammaBins + gammaMin;
                PowerLawFlux testFlux(1,testGamma);  //  1 GeV^-1 cm^-2 s^-1;  index = testGamma
                FluxBase *myFluxPtr = &testFlux;
                
                I3PointGenerator i3point(sourceEvents, *myFluxPtr, srcLocations[srcIndex], ark86.livetime);
                srcWeight = i3point->GetMeanSrcNev();
                //srcWeight = 1;
                //cout <<srcIndex<<"  "<<gammaIndex<<"  "
                //     <<testGamma<<"  "<<srcWeight*pdfEnhancement[srcIndex]<< endl;
                srcWeightsArray86[srcIndex].push_back(srcWeight*pdfEnhancement[srcIndex]);
            }
            
        }
        
        // Normalize each row for sanity's sake (stacking method does not require this)
        cout << endl;
        cout << "Normalized table of Src Weights for different gamma:" << endl;
        cout << "x-axis = Source Index, y-axis = gamma index (soft to hard)"<<endl;
        cout << endl;
        for ( int gammaIndex=0; gammaIndex<nGammaBins; gammaIndex++) {
            printf("%02d:  ",gammaIndex);
            //cout << gammaIndex << ": ";
            double sumRow = 0;
            // Find norm constant
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                sumRow += srcWeightsArray86[srcIndex][gammaIndex];
            }
            // And normalize
            for (int srcIndex=0; srcIndex<vSize; srcIndex++){
                srcWeightsArray86[srcIndex][gammaIndex]/=sumRow;
                printf("%.4f ",srcWeightsArray86[srcIndex][gammaIndex]);
            }
            
            cout << endl;
            
        }        
        
        /*NewLlhStack newllhstack40;
        newllhstack40.SetUseEnergy(true);
        //newllhstack40.SetOptimizeAngleDeg(10.);
        newllhstack40.SetOptimizeTolerance(0.00);
        newllhstack40.SetMonitorLevel(monLev);
        newllhstack40.SetAnalysisSet(ark40.psData);
        
        // NEW FOR STACKING
        newllhstack40.SetAnalysisSet(ark40.psData);
        newllhstack40.SetSourceCoords(srcLocations);
        newllhstack40.SetStackedWeightTable(srcWeightsArray40);
        // NEW FOR EXT
        newllhstack40.SetSourceSigmas(srcSigmas);*/
        
        NewLlhStack newllhstack59;
        newllhstack59.SetUseEnergy(true);
        //newllhstack59.SetOptimizeAngleDeg(10.);
        newllhstack59.SetOptimizeTolerance(0.00);
        newllhstack59.SetMonitorLevel(monLev);
        newllhstack59.SetAnalysisSet(ark59.psData); 
        
        // NEW FOR STACKING
        newllhstack59.SetAnalysisSet(ark59.psData);
        newllhstack59.SetSourceCoords(srcLocations);
        newllhstack59.SetStackedWeightTable(srcWeightsArray59);
        // NEW FOR EXT 
        newllhstack59.SetSourceSigmas(srcSigmas);
        
        NewLlhStack newllhstack79;
        newllhstack79.SetUseEnergy(true);
        //newllhstack79.SetOptimizeAngleDeg(10.);
        newllhstack79.SetOptimizeTolerance(0.00);
        newllhstack79.SetMonitorLevel(monLev);
        newllhstack79.SetAnalysisSet(ark79.psData);
        
        // NEW FOR STACKING
        newllhstack79.SetAnalysisSet(ark79.psData);
        newllhstack79.SetSourceCoords(srcLocations);
        newllhstack79.SetStackedWeightTable(srcWeightsArray79);
        // NEW FOR EXT
        newllhstack79.SetSourceSigmas(srcSigmas);
	
        NewLlhStack newllhstack86;
        newllhstack86.SetUseEnergy(true);
        //newllhstack86.SetOptimizeAngleDeg(10.);
        newllhstack86.SetOptimizeTolerance(0.00);
        newllhstack86.SetMonitorLevel(monLev);
        newllhstack86.SetAnalysisSet(ark86.psData);
        
        // NEW FOR STACKING
        newllhstack86.SetAnalysisSet(ark86.psData);
        newllhstack86.SetSourceCoords(srcLocations);
        newllhstack86.SetStackedWeightTable(srcWeightsArray86);
        // NEW FOR EXT
        newllhstack86.SetSourceSigmas(srcSigmas);	
        
        
        MultiAnalysisFn maf;
        //maf.AddAnalysisFn(&newllh22);
        //maf.AddAnalysisFn(&newllhstack40);
        maf.AddAnalysisFn(&newllhstack59);
        maf.AddAnalysisFn(&newllhstack79);
	maf.AddAnalysisFn(&newllhstack86);
        
        //gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/ic59/SimpleMultiAnalysis.C");
        
    }
    
    //EquatorialDeg testSearch(153.375, 11.375);
    //EquatorialDeg testSearch(343.491,16.148);
    
    //mark.SetSource(mySignalPtr);
    //ark40.SetSource(srcMod40);
    ark59.SetSource(srcMod59);
    ark79.SetSource(srcMod79);
    ark86.SetSource(srcMod86);
    //maf.SetSearchCoord(testSearch); // Not needed for stacking
    
    //MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
    
    NewLlhEnergy_ParTranslator pt;
    pt.SetRange(1,4,31);
    pt.SetTranslator(mas);
    
    maf.SetParTranslator(&pt);
    
    vector<MinuitParDef> pdv;
    pdv.push_back( MinuitParDef("nSrc",2,0.1, 0.,100.) );
    pdv.push_back( MinuitParDef("gamma",2.5,0.5, 1., 4.) );
    maf.SetParDefs(pdv);
    
    //SimpleMultiAnalysis sa;
    //sa.SetNDoF(2);
    
    //cout << "Starting trials" << endl;
    //sa.Execute(mark,maf,1000,0);

    // Disco (Discovery Potential and Sensitivity Estimator)
    DiscoveryPotential disco;
    gROOT->ProcessLine(".L SetDisco.C");
    // parameters:  loops, optMedianUpperLimit,  significance,  power);
    //SetDisco(disco, 15, false, 2.87e-7, 0.5); // Discovery Potential
    SetDisco(disco, 30, false, 0.0256389, 0.9); // Sensitivity 
    
    gROOT->ProcessLine(".L MultiDetectionStudy.C");
     
    TCanvas *c = MultiDetectionStudy(mark, maf, mas, disco); //


    //c->SaveAs("Discpotwithextensions.png");
    //c->SaveAs("Discpotwithextensions.root");
    //c->Saveas("Discpot.C");
    
    

}
