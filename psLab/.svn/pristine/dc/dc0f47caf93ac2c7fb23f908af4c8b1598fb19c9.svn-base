{

  bool RELOAD;

  if (!RELOAD) {
    RELOAD = true;
    gROOT->Macro("$LAB_MAIN_DIR/llhTimeDep/loadlibs.C");
    if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

  //  TString macroPath = gROOT->GetMacroPath();
  //  macroPath += gSystem->ExpandPathName("$LAB_MAIN_DIR/macro_llh:");
  //  gROOT->SetMacroPath(macroPath);


    if (1) { initialize_ran1(-55); } // seed has to be a *NEGATIVE* integer
    else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
    int ranSeed = get_ran1_seed(); // if you want to know what the seed was

    gROOT->ProcessLine(".L Ark.C");

    bool OPT_USEREALDATA = false;

//    I3Ark ark22;
//    gROOT->ProcessLine(".x load_ark_ic22.C(ark22, OPT_USEREALDATA)");

    I3Ark ark40;
    gROOT->ProcessLine(".x load_ark_ic40.C(ark40, OPT_USEREALDATA)");

    I3Ark ark59;
    //gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    gROOT->ProcessLine(".x load_ark_ic59_BDT.C(ark59, OPT_USEREALDATA)");

  // Source 

  //  ark22.SetPointSource(153.375, 11.375, 1.,-2 );
  //  ark40.SetPointSource(153.375, 11.375, 1.,-2 );
  //  ark59.SetPointSource(153.375, 11.375, 1.,-2 );
 
  //  ark22.SetPointSource(153.375, 11.375, "1.*pow(x,-2)");
  //  ark22.SetPointSource(EquatorialDeg(153.375, 11.375), PowerLawFlux(1, -2));

  // ark40.SetPointSource(0., 61.23, 1., -2);

  //gROOT->ProcessLine(".L AllSky.C");
  //AllSky as;
  //as.SetRange(148, 158, 5, 15);

    MultiArk mark;
    //mark.AddArk(ark22);
    mark.AddArk(ark40);
    mark.AddArk(ark59);
    //mark.SetSrcLocation(ark40.mySrcLocation);

    //NewLlhEnergy newllh;
    //newllh.SetUseEnergy(true);
    //newllh.SetOptimizeAngleDeg(10.);
    //newllh.SetOptimizeTolerance(0.01);

    /*NewLlhEnergy newllh22;
    newllh22.SetUseEnergy(true);
    newllh22.SetOptimizeAngleDeg(10.);
    newllh22.SetOptimizeTolerance(0.01);
    //newllh22.SetMonitorLevel(2);
    newllh22.SetAnalysisSet(ark22.psData); //*/

    int monLevel = 0;
    string blocksFile = "/net/user/mfbaker/Fermi/data/lcAll/lcAll.3C454.3cp.l1.txt";
    double laglimit = 0.5;

    NewLlhBlockTime newllh40;
    newllh40.SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(10.);
    newllh40.SetOptimizeTolerance(0.01);
    newllh40.SetMonitorLevel(monLevel);
    newllh40.SetEMaxRatioWarnOnlyOnce(1);
    newllh40.JimsTerm_ = false;
    newllh40.SpectralPenalty_ = false;
    newllh40.ndof_ = 3.;
    newllh40.laglimit_ = laglimit;
    newllh40.SetLivetime(410.);
    newllh40.SetBlocks(blocksFile,0.);
    newllh40.SetAnalysisSet(ark40.psData);

    NewLlhBlockTime newllh59;
    newllh59.SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(10.);
    newllh59.SetOptimizeTolerance(0.01);
    newllh59.SetMonitorLevel(monLevel);
    newllh59.SetEMaxRatioWarnOnlyOnce(1);
    newllh59.JimsTerm_ = false;
    newllh59.SpectralPenalty_ = false;
    newllh59.ndof_ = 3.;
    newllh59.laglimit_ = laglimit;
    newllh59.SetLivetime(375.);
    newllh59.SetBlocks(blocksFile,0.);
    newllh59.SetAnalysisSet(ark59.psData);
    
    newllh40.SetTimeBounds(ark40.tmin, ark40.tmax);
    newllh59.SetTimeBounds(ark59.tmin, ark59.tmax);
    
    MultiBlockAnalysisFn maf;
    maf.AddAnalysisFn(&newllh40);
    maf.AddAnalysisFn(&newllh59);
    maf.blocksFile = blocksFile;
    
    
    //maf.AddAnalysisFn(&newllh22);
  
    gROOT->ProcessLine(".L SimpleMultiBlockAnalysis.C");
  
  }

  //EquatorialDeg testSearch(153.375, 11.375);
  EquatorialDeg testSearch(343.491,16.148);

  double spectralIndex = -2;

  TimePdf * tPdf = new BlockTimePdf1();
  tPdf->SetBlockLevels(blocksFile,10.5e-6);
  tPdf->fillHisto();
    
  mark.SetPointSource(testSearch, PowerLawFlux(1.,spectralIndex), tPdf);
  maf.SetSearchCoord(testSearch);

  MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
  //MultiAnalysisSet* mas;// = dynamic_cast<MultiAnalysisSet*>(mark.psData);
  //mas->AddAnalysisSet(ark40.psData);
  //mas->AddAnalysisSet(ark59.psData);
  
  NewLlhBlockTime_ParTranslator pt;
  //NewLlhEnergy_ParTranslator pt;
  pt.SetRange(1,4,30);
  pt.SetUpBlocks(blocksFile);
  pt.SetTranslator(mas);
    
  maf.SetParTranslator(&pt);

  //double guessThresh=1e-6; 
  //double lagGuess = 0.;//SearchForLag(llh, laglimit);
  
  //double threshMax = 
  //   ( GetHighestBlock(blocksFile) + GetSecondHighestBlock(blocksFile) ) /2.;

/*

  SimpleMultiBlockAnalysis sa;
  sa.SetNDoF(3);
   
  sa.Execute(mark,maf, blocksFile, 10, 5);

//*/


  //* Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  
  gROOT->ProcessLine(".L SetDisco.C");
  gROOT->ProcessLine(".L MultiBlockDetectionStudy.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
  SetDisco(disco, 10, false, 2.87e-7, 0.5);
  // SetDisco(disco, 30, true, 0.5, 0.9);
  
  double thMax = ( GetHighestBlock(blocksFile) + GetSecondHighestBlock(blocksFile) ) /2.;
  //dsigmas[] = {1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 3e-1, 1., 3., 10, 1e2};
  double n_disco[8], thTest[8], thPlot[8], ndays[8];
  
//*
  for (int i=0;i<8;i++) {
    
    thTest[i] = thMax * i / 8.;
    thPlot[i] = thTest[i] * 1e6;
    ndays[i] = BlockTimeAboveThresh(blocksFile, thTest[i]);
    cout << "Testing Threshold of: " << thTest[i] << endl;
    
    TimePdf * tPdf2 = new BlockTimePdf1();
    tPdf2->SetBlockLevels(blocksFile,thTest[i]);
    tPdf2->fillHisto();
    
    mark.SetPointSource(testSearch, PowerLawFlux(1.,spectralIndex), tPdf2);
    maf.SetSearchCoord(testSearch);
  
    n_disco[i] = MultiDetectionStudy_d(mark, maf, mas, disco);
  
  }
  
  TCanvas * canComp = new TCanvas("canComp","canComp",1200,500);
  canComp->Divide(2,1);

  canComp.cd(1);
  
  TGraph * g = new TGraph(8,thPlot,n_disco);
  g->GetXaxis()->SetTitle("Threshold for Emission (1e-6 Photon cm^{-2} s^{-1})");
  g->GetYaxis()->SetTitle("N Events for Discovery in 50% of trials");
  g->Draw("AL"); //*/

  canComp.cd(2);

  TGraph * gd = new TGraph(8,ndays,n_disco);
  gd->GetXaxis()->SetTitle("Time above threshold for emission (days)");
  gd->GetYaxis()->SetTitle("N Events for Discovery in 50% of trials");
  gd->Draw("AL"); 
  
  //canComp.Save();
  
  //*/

  /*
  // Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  gROOT->ProcessLine(".L SetDisco.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
   SetDisco(disco, 5, false, 2.87e-7, 0.5);

  gROOT->ProcessLine(".L MultiDetectionStudy.C");
 
  TCanvas *c = MultiDetectionStudy(mark, maf, mas, disco); //*/

 
  return 1; // signal correct finish of script
}
