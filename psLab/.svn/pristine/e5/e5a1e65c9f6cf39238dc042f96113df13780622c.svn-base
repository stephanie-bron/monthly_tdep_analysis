{

  bool RELOAD;
  int nsrc=0;
  bool DiscpotNotSensit = true;

  if (!RELOAD) {
    RELOAD = true;
    gROOT->Macro("$LAB_MAIN_DIR/llhTimeDep/loadlibs.C");
    if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

  //  TString macroPath = gROOT->GetMacroPath();
  //  macroPath += gSystem->ExpandPathName("$LAB_MAIN_DIR/macro_llh:");
  //  gROOT->SetMacroPath(macroPath);


    if (0) { initialize_ran1(-55); } // seed has to be a *NEGATIVE* integer
    else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
    int ranSeed = get_ran1_seed(); // if you want to know what the seed was

    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-IV_TDep/ArkTime.C");

    bool OPT_USEREALDATA = false;
    
    
    //gROOT->ProcessLine(".L TreeLoader_IC79_Final.C");
    //gROOT->ProcessLine(".L TreeLoader_IC59_Final.C");
    //gROOT->ProcessLine(".L TreeLoader_IC40_CutA6_Fix_final.C");
    //gROOT->ProcessLine(".L TreeLoader_IC86.C"); 
    //
    //gROOT->ProcessLine(".L mpfSigmaDegRescaledIC79V2.C+");
    //gROOT->ProcessLine(".L mpfSigmaDegRescaledIC59.C+");
    //gROOT->ProcessLine(".L mpfSigmaDegRescaled2.C+");
    //gROOT->ProcessLine(".L RescaledSigma_IC86_MuEX.C+");
    //gROOT->ProcessLine(".L RescaledSigma_IC86_SplineMPE.C++");
    //gROOT->ProcessLine(".L RescaledSigma_IC86_MPE.C+");   

    //I3Ark ark40;
    //gROOT->ProcessLine(".x load_ark_ic40.C(ark40, OPT_USEREALDATA)");

    //I3Ark ark59;
    ////gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    //gROOT->ProcessLine(".x load_ark_ic59_BDT.C(ark59, OPT_USEREALDATA)");
    //
    //I3Ark ark79;
    ////gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    //gROOT->ProcessLine(".x load_ark_ic79_Final.C(ark79, OPT_USEREALDATA)");
    //
    //I3Ark ark86;
    //TString RecoName = "SplineMPE";
    //gROOT->ProcessLine(".x load_ark_ic86_BDT.C(ark86, OPT_USEREALDATA, RecoName)");    
    //

    //MultiArk mark;
    //mark.AddArk(ark40);
    //mark.AddArk(ark59);
    //mark.AddArk(ark79);
    //mark.AddArk(ark86);    
    //MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/mpfSigmaDegRescale
dIC40.C+");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/mpfSigmaDegRescale
dIC59.C+");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/mpfSigmaDegRescale
dIC79Sirin.C+");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/RescaledSigma_IC86
_SplineMPE.C+");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/RescaledSigma_IC86
_II_III_IV_SplineMPE.C+");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/RescaledSigma_IC79
_86_I_to_IV_SplineMPE.C+");
    
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/TreeLoader_IC40_Cu
tA6_Fix_final.C");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/TreeLoader_IC59_Fi
nal.C");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/TreeLoader_IC79_Fi
nal.C");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/TreeLoader_IC86.C"
);
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/TreeLoader_IC86_II
_III_IV.C");
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/TreeLoader_IC79_86
_I_to_IV_MESE.C");
   
    
    vector<I3Ark*> ark;
    ark.clear();

    I3Ark *ark40=new I3Ark();
    gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/load_ark_ic40.C(*a
rk40, OPT_USEREALDATA)");
    ark.push_back(ark40);

    I3Ark *ark59=new I3Ark();
    gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/load_ark_ic59_BDT.
C(*ark59, OPT_USEREALDATA)");
    ark.push_back(ark59);
    
    I3Ark *ark79=new I3Ark();
    gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/load_ark_ic79_Siri
n.C(*ark79, OPT_USEREALDATA)");
    ark.push_back(ark79);
    
    I3Ark *ark86=new I3Ark();
    TString RecoName = "SplineMPE";
    gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/load_ark_ic86_BDT.C(*ark86, OPT_USEREALDATA, RecoName)");
    ark.push_back(ark86);
 
    I3Ark *ark862more=new I3Ark();
    gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/load_ark_ic86_II_III_IV.C(*ark862more, OPT_USEREALDATA, RecoName)");
    ark.push_back(ark862more);
    
    I3Ark *arkMESE=new I3Ark();
    gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/IC86-II-III_Stacking/load_ark_IC79_86_I_to_IV_MESE.C(*arkMESE, OPT_USEREALDATA, RecoName)");
    ark.push_back(arkMESE);
 
    MultiArk *mark=new MultiArk();
    for(int arki=0;arki<ark.size();arki++){
        mark->AddArk(*ark[arki]);
    }

    MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark->psData);
    double monLev = 0.;   
    double period_[10], t0_[10];
    
    period_[0] = 0.199679;     t0_[0]=54896.693;  // Cygnus X3
    period_[1] = 13.08211;     t0_[1]=50023.62;  //SS 433
    period_[2] = 5.5929;       t0_[2]=41874.707; // Cygnus X1
    period_[3] = 26.498;       t0_[3]=43366.775; //LS I +61 303 (radio zero)
    period_[4] = 30.8;         t0_[4]=53945.7; // GRS 1915+105
    period_[5] = 0.1699339;    t0_[5]=52287.9929; // XTE J1118+480
    period_[6] = 0.212140;     t0_[6]=50274.4156; // GRO j0422+32
    period_[7] = 320.;         t0_[7]=54857.0; // HESS J0632+057
    period_[8] = 3.906;         t0_[7]=43366.775; // LS 5039
    period_[9] = 16.58;         t0_[7]=55303.3; // HESS j1018
    
    
    double period = period_[nsrc];
    double t0 = t0_[nsrc];
    
    //bool jT = false; double nd = 4.; double wp = 0.0;
    bool jT = true; double nd = 3.; 
    double wp = 1.; //0.25;//0.83;//0.875;//0.67;1.;//1.;

    //cout << "WeightPower: " << wp << endl;
    //char hts[300];
    //int n = sprintf(hts,".x plots/hTeststat.wp%0.3i.C",100*wp);
    //gROOT->ProcessLine(hts);
    

    NewLlhPeriodicTime newllh40;
    newllh40.SetUseEnergy(true);
    //newllh40.SetOptimizeAngleDeg(6.);
    newllh40.SetOptimizeTolerance(0.01);
    newllh40.SetMonitorLevel(monLev);
    newllh40.SetEMaxRatioWarnOnlyOnce(1);
    newllh40.close_ = 10.;
    newllh40.JimsTerm_ = jT; 
    newllh40.ndof_ = nd;
    newllh40.SpectralPenalty_ = false;
    newllh40.SetLivetime(1.);
    newllh40.SetWeightPower(wp);
    //    newllh40.SetAnalysisSet(ark40.psData);
    newllh40.SetTimePeriodic(period,t0);
    //newllh40.SetLocalCoordBkgProb(ark40.lcBkgProb);

    NewLlhPeriodicTime newllh59;
    newllh59.SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(6.);
    newllh59.SetOptimizeTolerance(0.01);
    newllh59.SetMonitorLevel(monLev);
    newllh59.SetEMaxRatioWarnOnlyOnce(1);
    newllh59.close_ = 10.;
    newllh59.JimsTerm_ = jT;
    newllh59.SpectralPenalty_ = false;
    newllh59.ndof_ = nd;
    newllh59.SetLivetime(1.);
    newllh59.SetWeightPower(wp);
//    newllh59.SetAnalysisSet(ark59.psData);
    newllh59.SetTimePeriodic(period,t0);
    //newllh59.SetLocalCoordBkgProb(ark59.lcBkgProb);
    
    NewLlhPeriodicTime newllh79;
    newllh79.SetUseEnergy(true);
    //newllh79.SetOptimizeAngleDeg(6.);
    newllh79.SetOptimizeTolerance(0.01);
    newllh79.SetMonitorLevel(monLev);
    newllh79.SetEMaxRatioWarnOnlyOnce(1);
    newllh79.close_ = 10.;
    newllh79.JimsTerm_ = jT;
    newllh79.SpectralPenalty_ = false;
    newllh79.ndof_ = nd;
    newllh79.SetLivetime(1.);
    newllh79.SetWeightPower(wp);
//    newllh79.SetAnalysisSet(ark79.psData);
    newllh79.SetTimePeriodic(period,t0);
    //newllh79.SetLocalCoordBkgProb(ark79.lcBkgProb);

    NewLlhPeriodicTime newllh86;
    newllh86.SetUseEnergy(true);
    //newllh86.SetOptimizeAngleDeg(6.);
    newllh86.SetOptimizeTolerance(0.01);
    newllh86.SetMonitorLevel(monLev);
    newllh86.SetEMaxRatioWarnOnlyOnce(1);
    newllh86.close_ = 10.;
    newllh86.JimsTerm_ = jT;
    newllh86.SpectralPenalty_ = false;
    newllh86.ndof_ = nd;
    newllh86.SetLivetime(1.);
    newllh86.SetWeightPower(wp);
//    newllh86.SetAnalysisSet(ark86.psData);
    newllh86.SetTimePeriodic(period,t0);    
    
    
    MultiPeriodicAnalysisFn maf;
    //maf.AddAnalysisFn(&newllh22);
    maf.AddAnalysisFn(&newllh40);
    maf.AddAnalysisFn(&newllh59);
    maf.AddAnalysisFn(&newllh79);
    maf.AddAnalysisFn(&newllh86);    
    maf.SetTimePeriodic(period,t0);
    maf.seedWtMin = 200.; // (WAS 10)
        
    //gSystem->ProcessLine(".L mqso.teststat.10k.nts.root");
    //maf.SetNullTestStat(hTestStatistic);
  
    gROOT->ProcessLine(".L SimpleMultiPeriodicAnalysis.C");
  
  }

  double radeg[10] = { 308.107, 287.957, 299.591, 40.132, 288.798, 169.545, 65.428, 90.550, 276.562, 10.296};
  double decdeg[10] = {40.958, 4.983, 35.202, 61.229, 10.946, 48.037, 32.907, 5.80, -14.84472, -59.00};
  
  TString sourcename[10] = {"Cyg_X_3", "SS433", "Cyg_X_1", "LSIplus61303", "GRS1915plus105", "XTEJ1118plus480", "GROJ0422plus32", "HESSJ0632plus057", "L35039", "HESSJ1018minus589"};
  
  //EquatorialDeg testSearch(299.591,16.00); // Test
  //EquatorialDeg testSearch(308.107,40.958); //Cyg X-3
  //EquatorialDeg testSearch(287.957, 4.983); //SS433
  //EquatorialDeg testSearch(299.591,35.202); // Cyg X-1
  //EquatorialDeg testSearch( 40.132,61.229); // Lsi+61
  //EquatorialDeg testSearch(288.798,10.946); //GRS 1915+105
  //EquatorialDeg testSearch(169.545,48.037); //XTE J1118+480
  //EquatorialDeg testSearch( 65.428,32.907); //GRO J0422+32
  //EquatorialDeg testSearch( 90.550, 5.80 ); //HESSJ0632+057

  //EquatorialDeg testSearch(153.375, 11.375);
  //EquatorialDeg testSearch(343.491,16.148);
  //EquatorialDeg testSearch(90.550, 5.80);
  
  EquatorialDeg testSearch(radeg[nsrc], decdeg[nsrc]);
  
  double meanBest[10], sigmaBest[10];
  meanBest[0]=0.82;     sigmaBest[0]=0.0128;
  meanBest[1]=0.554;	sigmaBest[1]=0.005;
  meanBest[2]=0.0654;	sigmaBest[2]=1;
  meanBest[3]=0.945;	sigmaBest[3]=0.0615;
  meanBest[4]=0.608;	sigmaBest[4]=0.0485;
  meanBest[5]=0.867;	sigmaBest[5]=0.208;
  meanBest[6]=0.644;	sigmaBest[6]=0.224;
  meanBest[7]=0.605;	sigmaBest[7]=0.196;
  meanBest[8]=0.644;	sigmaBest[8]=0.224;
  meanBest[9]=0.605;	sigmaBest[9]=0.196;  
  
  TimePdf * tPdf = new PeriodicGaussianTimePdf(0., 1., meanBest[nsrc], sigmaBest[nsrc],1.);
  
  newllh40.SetAnalysis(ark40.psData, testSearch);
  newllh59.SetAnalysis(ark59.psData, testSearch);
  newllh79.SetAnalysis(ark79.psData, testSearch);
  newllh86.SetAnalysis(ark86.psData, testSearch);  
  
  mark.SetPointSource(testSearch, PowerLawFlux(1.,-2.), tPdf);
  maf.SetSearchCoord(testSearch);

  cout << tPdf->GenerateEventTime().GetMJD() << endl;
  
  NewLlhPeriodicTime_ParTranslator pt;
  pt.SetRange(1,4,31);
  pt.SetTranslator(mas);
  
  maf.SetParTranslator(&pt);

  int nTrials = 10000;

/*  vector<I3Event> allEvs;
  TH1D * deltaT = new TH1D("deltaT","deltaT",200,-8,0);
  TH1D * deltaP = new TH1D("deltaP","deltaP",200,-10,-2);
  vector<double> evTimes;
  vector<double> evPhases;

  for (int i=0;i<nTrials;i++) {
lists.icecube.wisc.edu/pipermail/ehe-wg/2007-August.txt.gz
    mark.psData->GenerateDataSet_with_nSrcEvents(0);
    maf.PrepareAnalysis();
    vector<I3Event> allEvs = maf.GetAllEvents();
    
    for (int k=0;k<(int)allEvs.size();k++) {
      evTimes.push_back( allEvs[k].GetMJD() );
      evPhases.push_back( fmod(allEvs[k].GetMJD()-t0,period)/period );
    }
    
    std::sort(evTimes.begin(),evTimes.end());
    std::sort(evPhases.begin(),evPhases.end());
    
    for (int k=1;k<(int)evTimes.size();k++) {
      deltaT->Fill( log10(evTimes[k] - evTimes[k-1]) );
      deltaP->Fill( log10(evPhases[k] - evPhases[k-1]) );
    }

  }lists.icecube.wisc.edu/pipermail/ehe-wg/2007-August.txt.gz

  TCanvas * cc = new TCanvas("cc","cc",600,800);
  cc->Divide(1,2);
  
  cc.cd(1);
  deltaT->Draw();

  cc.cd(2);
  deltaP->Draw(); // */

//   SimpleMultiPeriodicAnalysis sa;
//   sa.SetNDoF(nd);
//    
//   cout << "Starting trials" << endl;
//   sa.Execute(mark,maf,nTrials,0);


  /*
  // Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  gROOT->ProcessLine(".L SetDisco.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
  // SetDisco(disco, 15, false, 2.87e-7, 0.5);
   SetDisco(disco, 25, false, 0.5, 0.9);

  gROOT->ProcessLine(".L MultiBlockDetectionStudy.C");
 
  TCanvas *c = MultiPeriodicDetectionStudy(mark, maf, mas, disco); // */
  //double dd = MultiPeriodicDetectionStudy_d(mark, maf, mas, disco);

  TString filename;

  cout<< "Source Name: "<<sourcename[nsrc]<<endl;
  cout << "R.A. :" <<radeg[nsrc] <<" Dec. :"<<decdeg[nsrc]<<endl;
  
if (DiscpotNotSensit)
{cout<< "Calculating Discovery Potential at various Periodic Flare widths"<<endl;
  filename = sourcename[nsrc] + "_discpot.root";}
else
{cout<< "Calculating Sensitivity at various Periodic Flare widths"<<endl;
  filename = sourcename[nsrc] + "_sensit.root";}

cout<<"Will write to file : " << filename<<endl;
  

  DiscoveryPotential disco;
  
  gROOT->ProcessLine(".L SetDisco.C");
  gROOT->ProcessLine(".L MultiBlockDetectionStudy.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
  
  if (DiscpotNotSensit)
  {SetDisco(disco, 15, false, 2.87e-7, 0.5);}
  else  
  {SetDisco(disco, 25, true, 0.5, 0.9);}
  
  double dsigmas[] = {1e-2, 3e-2, 5e-2, 1e-1, 3e-1, 5e-1, 1.};
  double n_disco[7], thTest[7], thPlot[7], ndays[7];
  double spectralIndex = -2.;

  for (int i=0;i<7;i++) {
       
    TimePdf * tPdf2 = new PeriodicGaussianTimePdf(0., 1., 0.5, dsigmas[i], 1.);
    
    mark.SetPointSource(testSearch, PowerLawFlux(1.,spectralIndex), tPdf2);
    maf.SetSearchCoord(testSearch);
  
    n_disco[i] = MultiPeriodicDetectionStudy_d(mark, maf, mas, disco);
  
  }
  
  TCanvas * canComp = new TCanvas("canComp","canComp",700,500);
 
  TGraph * s = new TGraph(7,dsigmas,n_disco);
  s->GetXaxis()->SetTitle("#sigma_{T} (1/Period)");
  s->GetYaxis()->SetTitle("N Events");
  gPad->SetLogx(1);
  s->Draw("AL");
  //s->SetNameTitle("sensit", "GRO J0422+32 90%cl Sensitivity");
  //s->Write();
  //canComp->SaveAs("sensitGROJ0422plus32.png");
  //canComp->SaveAs("sensitGROJ0422plus32.root");
  //fout->Close();
  
  if DiscpotNotSensit
  {s->SetNameTitle("discpot", "5 #sigma Discovery Potential");}
  else
  {s->SetNameTitle("sensit", "90%cl Sensitivity");}
  


TFile *fout = new TFile(filename,"RECREATE");
 s->Write();
 
 fout->Close();
  
  //
 
  return 1; // signal correct finish of script
}
