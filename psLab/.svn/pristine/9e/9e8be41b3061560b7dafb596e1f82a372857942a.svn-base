
class DataConsole {
private:
  vector<double> raDegVect_;
  vector<double> decDegVect_;
  vector<double> sinDecVect_;

public:
  DataConsole() {
    gROOT->SetStyle("Plain");
    gStyle->SetOptStat(0);
  }

  ~DataConsole() { }

  void SetCoordVectors(const EventPtrList& epList) {
    raDegVect_.clear();
    decDegVect_.clear();
    for (int i=0; i<epList.GetSize(); ++i) {
      const I3Event *ev = dynamic_cast<I3Event*> (epList.GetEvent(i));
      raDegVect_.push_back( ev->GetEquatorialDeg().GetRa() );
      decDegVect_.push_back( ev->GetEquatorialDeg().GetDec() );
      sinDecVect_.push_back(sin(ev->GetEquatorialDeg().GetDec()
				* TMath::DegToRad()));
    }
  }

  const vector<double>& GetRaDegVect() const { return raDegVect_; }
  const vector<double>& GetDecDegVect() const { return decDegVect_; }
  const vector<double>& GetSinDecVect() const { return sinDecVect_; }

  void PlotSky(I3Analysis& ds) {
    TCanvas *can = new TCanvas("canDataConsole","DataConsole",20,20,1200,800);
    can->cd();

    double decMinDeg = -90.;
    double decMaxDeg = 90.;
    double raMinDeg = 0.; 
    double raMaxDeg = 360.;

    SetCoordVectors(ds.GetEventPtrList());

    TH2D *hFrame = new TH2D("hFrame",";r.a. (#circ);dec. (#circ)",
			    1,raMinDeg,raMaxDeg,
			    1,decMinDeg,decMaxDeg);
    hFrame->Draw();

    TGraph *g;
    if ( raDegVect_.size() > 0 ) {
      g = new TGraph(raDegVect_.size(),&(raDegVect_[0]),&(decDegVect_[0]));
      g->Draw("P");
      g->SetMarkerStyle(6);
    }
  }


  void DiagnoseZenithEnergyProb(ZenithEnergyProb& eProb) {
    int nTotalGammaMissingBelow = 0;
    int nTotalGammaMissingAbove = 0;
    for (int i=1; i<=eProb.GetNZenithBands(); ++i) {
      eProb.SelectZenithBand(i);
      const TH1D& hBkg = eProb.GetHistProbBkg();
      const TH1D& hGamma = *(eProb.GetHistProbGamma(2.0)); // arbitrary index
      double 
      int nGammaMissingBelow = 0;
      int nGammaMissingAbove = 0;
      bool gammaStarted = false;
      for (int bin=0; bin<=hBkg.GetNbinsX()+1; ++bin) // incl. under/overflow
	{	  
	  if (hBkg.GetBinContent(bin)>0 && hGamma.GetBinContent(bin)==0) {
	    if (gammaStarted) {
	      nGammaMissingAbove += 
		int(0.5 + hBkg.GetBinContent(bin)*hBkg.GetEntries() );
	    } else {
	      nGammaMissingBelow += 
		int(0.5 + hBkg.GetBinContent(bin)*hBkg.GetEntries() );
	    }
	  }

	  if ( !gammaStarted && hGamma.GetBinContent(bin)>0) {
	    gammaStarted = true;
	  }
	}

      if (i==1) {
	printf("Band (zenMin, zenMax) : Data Events Total :  "
	       "No gamma (lowE)    No gamma (hiE)\n");
      }
      printf("%2d   (%5.1f , %5.1f) :  %5d  :",
	     i,
	     eProb.GetHistZenDegBands().GetBinLowEdge(i),
	     eProb.GetHistZenDegBands().GetBinLowEdge(i+1),
	     hBkg.GetEntries());
      if (nGammaMissingBelow) { printf("   %5d",nGammaMissingBelow); }
      else { printf("       -"); }
      if (nGammaMissingAbove) { printf("   %5d",nGammaMissingAbove); }
      else { printf("       -"); }
      printf("\n");
      
      nTotalGammaMissingBelow += nGammaMissingBelow;
      nTotalGammaMissingAbove += nGammaMissingAbove;
    }
    cout << "Total data events missing gamma (low energy): ";
    cout << nTotalGammaMissingBelow << endl;
    cout << "Total data events missing gamma (high energy): ";
    cout << nTotalGammaMissingAbove << endl;
  }

  void PlotZenithEnergyProb(ZenithEnergyProb& eProb) {
    gStyle->SetPadRightMargin(0.01);
    gStyle->SetPadBottomMargin(0.05);
    gStyle->SetPadTopMargin(0.01);

    TCanvas *can = new TCanvas("canZenEProb","canZenEProb",20,20,1200,800);
    int nBands = eProb.GetNZenithBands();
    can->Divide(ceil(sqrt(nBands)),ceil(sqrt(nBands)),0.001,0.001);

    for (int i=1; i<=nBands; ++i) {
      can->cd(i);
      eProb.SelectZenithBand(i);
      TH1D hBkg = eProb.GetHistProbBkg();
      char title[200];
      sprintf(title,"zenith: %5.1f#circ - %5.1f#circ",
	      eProb.GetHistZenDegBands().GetBinLowEdge(i),
	      eProb.GetHistZenDegBands().GetBinLowEdge(i+1));
      hBkg.SetTitle(title);
      hBkg.SetLineColor(1);
      hBkg.DrawClone();
      TH1D* hgamma15 = eProb.GetHistProbGamma(1.5);
      hgamma15->SetLineColor(kRed);
      hgamma15->DrawClone("same");
      TH1D* hgamma2 = eProb.GetHistProbGamma(2.0);
      hgamma2->SetLineColor(51);
      hgamma2->DrawClone("same");
      TH1D* hgamma3 = eProb.GetHistProbGamma(3.0);
      hgamma3->SetLineColor(kBlue);
      hgamma3->DrawClone("same");
      gPad->SetLogy();
    }
    gStyle->SetPadRightMargin(0.1);
    gStyle->SetPadBottomMargin(0.1);
    gStyle->SetPadTopMargin(0.1);
  }
};
