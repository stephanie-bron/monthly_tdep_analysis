{

  bool RELOAD;

  if (!RELOAD) {
    RELOAD = true;
    gROOT->Macro("$LAB_MAIN_DIR/llh/loadlibs.C");
    if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

  //  TString macroPath = gROOT->GetMacroPath();
  //  macroPath += gSystem->ExpandPathName("$LAB_MAIN_DIR/macro_llh:");
  //  gROOT->SetMacroPath(macroPath);


    if (1) { initialize_ran1(-55); } // seed has to be a *NEGATIVE* integer
    else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
    int ranSeed = get_ran1_seed(); // if you want to know what the seed was

    gROOT->ProcessLine(".L Ark.C");

    bool OPT_USEREALDATA = true;

  // IC22

    I3Ark ark22;
    gROOT->ProcessLine(".x load_ark_ic22.C(ark22, OPT_USEREALDATA)");

    I3Ark ark40;
    gROOT->ProcessLine(".x load_ark_ic40.C(ark40, OPT_USEREALDATA)");

  // Source 

  //  ark22.SetPointSource(153.375, 11.375, 1.,-2 );
  //  ark40.SetPointSource(153.375, 11.375, 1.,-2 );
 
  //  ark22.SetPointSource(153.375, 11.375, "1.*pow(x,-2)");
  //  ark22.SetPointSource(EquatorialDeg(153.375, 11.375), PowerLawFlux(1, -2));

  // ark40.SetPointSource(0., 61.23, 1., -2);

  //gROOT->ProcessLine(".L AllSky.C");
  //AllSky as;
  //as.SetRange(148, 158, 5, 15);

    MultiArk mark;
    mark.AddArk(ark22);
    mark.AddArk(ark40);
  //mark.SetSrcLocation(ark40.mySrcLocation);

    //NewLlhEnergy newllh;
    //newllh.SetUseEnergy(true);
    //newllh.SetOptimizeAngleDeg(10.);
    //newllh.SetOptimizeTolerance(0.01);

    NewLlhEnergy newllh22;
    newllh22.SetUseEnergy(true);
    newllh22.SetOptimizeAngleDeg(10.);
    newllh22.SetOptimizeTolerance(0.01);
    //newllh22.SetMonitorLevel(2);
    newllh22.SetAnalysisSet(ark22.psData);
      
    NewLlhEnergy newllh40;
    newllh40.SetUseEnergy(true);
    newllh40.SetOptimizeAngleDeg(10.);
    newllh40.SetOptimizeTolerance(0.01);
    //newllh40.SetMonitorLevel(2);
    newllh40.SetAnalysisSet(ark40.psData);
      
    MultiAnalysisFn maf;
    maf.AddAnalysisFn(&newllh40);
    maf.AddAnalysisFn(&newllh22);
  
    gROOT->ProcessLine(".L SimpleMultiAnalysis.C");
  
  }

  EquatorialDeg testSearch(153.375, 11.375);

  mark.SetPointSource(testSearch, PowerLawFlux(1,-2));
  maf.SetSearchCoord(testSearch);

  MultiAnalysisSet* mas = dynamic_cast<MultiAnalysisSet*>(mark.psData);
  //MultiAnalysisSet * mas = mark.psData;
  //mas->AddAnalysisSet(ark22.psData);
  //mas->AddAnalysisSet(ark40.psData);

  NewLlhEnergy_ParTranslator pt;
  pt.SetRange(1,4,30);
  pt.SetTranslator(mas);
  
  maf.SetParTranslator(&pt);

  vector<MinuitParDef> pdv;
  pdv.push_back( MinuitParDef("nSrc",2,0.1, 0,100) );
  pdv.push_back( MinuitParDef("gamma",2.5,0.5, 1., 4.) );
  maf.SetParDefs(pdv);

  SimpleMultiAnalysis sa;
  sa.SetNDoF(2);
  
  //cout << "Starting trials" << endl;
  
  //sa.Execute(mark,maf,10000,5);


  /*
  // Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  gROOT->ProcessLine(".L SetDisco.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
  SetDisco(disco, 5, false, 2.87e-7, 0.5);

  gROOT->ProcessLine(".L MultiDetectionStudy.C");
 
  TCanvas *c = MultiDetectionStudy(mark, maf, disco); */
 
  //return 1; // signal correct finish of script
}
