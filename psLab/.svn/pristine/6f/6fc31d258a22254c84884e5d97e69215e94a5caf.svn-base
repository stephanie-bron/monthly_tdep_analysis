
void AllSkyOneScrambledTrial(int seed){

  gROOT->Macro("$LAB_MAIN_DIR/llh/loadlibs.C");

  if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

  if (1) { initialize_ran1(-1*seed); } // seed has to be a *NEGATIVE* integer
  else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time

  int ranSeed = get_ran1_seed(); // if you want to know what the seed was

  //bool OPT_USEREALDATA = false; // Doesn't set as 'global' when run as a macro
                                  // Defaults to false in following
  //bool OPT_USEREALDATA = true;

  //char* loadFile = "macro_loadClean_6months_final.C";
  char* loadFile = "$LAB_MAIN_DIR/macro_llh/ic40_full/macro_loadClean_Full_final.C";
  cout << "loadFile: " << loadFile << endl;
  gROOT->Macro(loadFile);

  gROOT->ProcessLine(".x $LAB_MAIN_DIR/macro_llh/ic40_full/macro_SetupAnalysis.C");

  AnalysisLlh *llhPtr = &llhEnergyFn;


  //bool optBatch;   // if set to true earlier, will skip drawing plots
  bool optBatch = 0;

  // SET RANGE
  double raLow  = 0.;
  double raHigh = 360.;
  double decLow  = -85.;
  double decHigh = 85.;


  // SET COARSE BINNING
  int nBinsCoarseRa = (raHigh-raLow)*2;
  int nBinsCoarseDec = (decHigh-decLow)*2;

  // SET FINE BINNING
  int nBinsFineRa = (raHigh-raLow)*10;
  int nBinsFineDec = (decHigh-decLow)*10;

  // SET -LOG_P VALUE FOR FINE-BINNED FOLLOW-UP
  double resultThreshold = 1.5;



  TH2D *hAllSkyCoarse = new TH2D("hAllSkyCoarse","hAllSkyCoarse",
			   nBinsCoarseRa,raLow,raHigh,
			   nBinsCoarseDec,decLow,decHigh);
  cout << "Coarse Grid: RA Bins: " << nBinsCoarseRa;
  cout << "   Dec Bins: " << nBinsCoarseDec << endl;


  TH2D *hAllSkyFine = new TH2D("hAllSkyFine","hAllSkyFine",
			       nBinsFineRa,raLow,raHigh,
			       nBinsFineDec,decLow,decHigh);
  cout << "Fine Grid:   RA Bins: " << nBinsFineRa;
  cout << "   Dec Bins: " << nBinsFineDec << endl;

  cout << "\nResult Threshold for fine-grid follow-up: " << resultThreshold;
  cout << "\n";


  double decDegMax;
  double raDegMax;
  double resultMax;
  double nsBest;
  double gammaBest;
  double llhBest;

  //
  // COARSE GRID
  //

  TStopwatch ts;
  resultMax = 0.;
  for (int iDec=1; iDec<=nBinsCoarseDec; ++iDec) {
    double decDeg = hAllSkyCoarse->GetYaxis()->GetBinCenter(iDec);
    if (!optBatch) { cout << decDeg << "  " << flush; }

    for (int iRa=1; iRa<=nBinsCoarseRa; ++iRa) {
      double raDeg = hAllSkyCoarse->GetXaxis()->GetBinCenter(iRa);
      
      EquatorialDeg searchLocation(raDeg,decDeg);
      llhPtr->SetAnalysis(psData,searchLocation);
      llhPtr->MaximizeLlh();

      double result = -log10(llhPtr->GetEstProb());
      hAllSkyCoarse->SetBinContent(iRa,iDec, result);

      if (result>resultMax) { 
	resultMax = result;
	decDegMax = decDeg;
	raDegMax = raDeg;
	nsBest = llhPtr->GetPar(0);
	gammaBest = llhPtr->GetPar(1);
	llhBest = llhPtr->Get_logLambdaBest();
      }
    }
  }
  cout << endl;
  ts.Print();

  if (!optBatch) {
    gROOT->SetStyle("Plain");
    CreatePalette(5);
    gStyle->SetOptStat(0);
  
    TCanvas *canAllSky = new TCanvas("canAllSky","canAllSky",800,400);
    hAllSkyCoarse->Draw("colz");
    canAllSky->Update();
  }  

  cout << "Coarse Grid Hottest Spot:\n";
  cout << "   Ra: " << raDegMax << " , Dec: " << decDegMax;
  cout << "   Result Max:  " << resultMax << endl;
  cout << "   llhBest =  " << llhBest << endl;
  cout << "   ns = " << nsBest << "   gamma = " << gammaBest << "\n\n";


  //
  // FINE GRID
  //

  TStopwatch ts;

  // keep same resultMax from above:
  // in case no coarse bin is over threshold, the max results from above
  // still apply

  for (int iDec=1; iDec<=nBinsFineDec; ++iDec) {
    double decDeg = hAllSkyFine->GetYaxis()->GetBinCenter(iDec);
    if (!optBatch) { cout << decDeg << "  " << flush; }

    for (int iRa=1; iRa<=nBinsFineRa; ++iRa) {
      double raDeg = hAllSkyFine->GetXaxis()->GetBinCenter(iRa);

      double result;

      // Check if follow-up required
      double coarseResult = 
	hAllSkyCoarse->GetBinContent( hAllSkyCoarse->FindBin(raDeg,decDeg) );

      if (coarseResult > resultThreshold) {
	EquatorialDeg searchLocation(raDeg,decDeg);
	llhPtr->SetAnalysis(psData,searchLocation);
	llhPtr->MaximizeLlh();
	result = -log10(llhPtr->GetEstProb());

	if (result>resultMax) { 
	  resultMax = result;
	  decDegMax = decDeg;
	  raDegMax = raDeg;
	  nsBest = llhPtr->GetPar(0);
	  gammaBest = llhPtr->GetPar(1);
	  llhBest = llhPtr->Get_logLambdaBest();
	}
      } else {
	result = coarseResult;
      }

      hAllSkyFine->SetBinContent(iRa, iDec, result);

    }
  }

  cout << endl;
  ts.Print();

  if (!optBatch) {
    TCanvas *canAllSkyFine = 
      new TCanvas("canAllSkyFine","canAllSkyFine",800,400);
    hAllSkyFine->Draw("colz");
    canAllSkyFine->Update();
  }

  cout << "Fine Grid Hottest Spot:\n";
  cout << "Ra: " << raDegMax << " , Dec: " << decDegMax;
  cout << "   Result Max:  " << resultMax << endl;
  cout << "   llhBest =  " << llhBest << endl;
  cout << "   ns = " << nsBest << "   gamma = " << gammaBest << endl;

  char mapFileName[200];
  sprintf(mapFileName,"macro_llh/trials/SkyMap-%d.root",seed);

  //gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/ic40_full/macro_AllSkyBasic_save.C");
  //gDirectory->Close();
  //macro_AllSkyBasic_save(mapFileName);

  //sprintf(mapFileName,".x $LAB_MAIN_DIR/macro_llh/ic40_full/macro_AllSkyBasic_save.C(\"macro_llh/trials/SkyMap-%d.root\")",seed);
  //gROOT->ProcessLine(mapFileName);

  TFile *f = new TFile(mapFileName,"recreate");

  //hAllSkyCoarse->Write();  // worth saving course?
  hAllSkyFine->Write();  // worth saving?

  f->Close();

  // Easily parseable:
  cout << "RESULTS " << raDegMax << " " << decDegMax << " " << resultMax << " " << llhBest << " " << nsBest << " " << gammaBest << endl;


}
