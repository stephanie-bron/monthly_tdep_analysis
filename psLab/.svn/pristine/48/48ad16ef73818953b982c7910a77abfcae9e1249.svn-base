// Variables declared outside the functions will have global scope
// and can be accessed after function exit.
//
// Note that if they are declared again (either by re-running this 
// script or another one which declares the same variables)
// their values may be reset, and should not be relied upon.

TH1D hTestStatistic;
TH1D hLogProb;
TH1D hPar;
TH2D hGammaNs;
TCanvas *canSimpleAnalysis;


// Default macro, gives user instructions

void macro_SimpleAnalysis() {
  cout << "Usage:\n";
  cout << ".x macro_SimpleAnalysis.C(int nTrials, int nSrcEvents = 0)\n";
}


void macro_SimpleAnalysis(int nTrials, int nSrcEvents = 0)
{
  extern I3Analysis psData;
  extern AnalysisLlh *llhPtr;
  extern mySrcLocation;

  bool llhUseEnergy;
  LlhEnergy* tempPtr = dynamic_cast<LlhEnergy*> llhPtr;
  if (tempPtr && tempPtr->GetUseEnergy() == true) { llhUseEnergy = true; }
  else {llhUseEnergy = false; }

  hTestStatistic.SetBins(100,0,1);
  hTestStatistic.SetTitle(";2 ln #lambda;trials");
  hLogProb.SetBins(100,-1,1);
  hLogProb.SetTitle(";log_{10} Prob;trials");
  hPar.SetBins(100,-1,1);
  hPar.SetTitle(";nSrcBest; trials");
  hGammaNs.SetBins(50,-1,1,30,1,4);
  hGammaNs.SetTitle(";nSrcBest;gammaBest");

  // Let Root figure out how to extend the bin range automatically
  hTestStatistic.SetBit(TH1::kCanRebin);
  hLogProb.SetBit(TH1::kCanRebin);
  hPar.SetBit(TH1::kCanRebin);
  hGammaNs.SetBit(TH1::kCanRebin);

  //
  // MAIN LOOP
  //
  
  
  AnalysisSet * aSet = &psData;

  CountMonitor countMon(10.,nTrials);
  for (int i=0; i<nTrials; ++i) {
    psData.GenerateDataSet_with_nSrcEvents(nSrcEvents);
    llhPtr->SetSearchCoord(mySrcLocation);
    llhPtr->SetAnalysisSet(aSet);
    llhPtr->MaximizeLlh();

    hTestStatistic.Fill(llhPtr->GetTestStatistic() * 2.);
    hLogProb.Fill(log10(llhPtr->GetEstProb()));
    hPar.Fill(llhPtr->GetPar(0));
    if (llhUseEnergy) {
      hGammaNs.Fill(llhPtr->GetPar(0),llhPtr->GetPar(1));
    }
    countMon.UpdateCount();
  }

  //
  // PLOT OUTPUT
  //

  // only make new canvas if it didn't already exist:
  canSimpleAnalysis = dynamic_cast<TCanvas*> 
    ( gROOT->GetListOfCanvases()->FindObject("canSimpleAnalysis") );
  if ( !canSimpleAnalysis ) {
    canSimpleAnalysis =
      new TCanvas("canSimpleAnalysis","canSimpleAnalysis",20,20,950,650);
    canSimpleAnalysis->Divide(3,2,0.005,0.005);
    for (int i=0; i<6; ++i) {
      canSimpleAnalysis->cd(i);
      gPad->SetRightMargin(0.01);
      gPad->SetTopMargin(0.01);
    }
  }
  TCanvas *can = canSimpleAnalysis;


  can->cd(1);

  TF1 *fchi2 = new TF1("fchi2","[0] * (1./sqrt(2*TMath::Pi())) "
		       "* exp(-x/2)/sqrt(x)",0,50);
  double xRange = hTestStatistic.GetXaxis()->GetXmax() -
    hTestStatistic.GetXaxis()->GetXmin();
  double binsPerUnit = hTestStatistic.GetNbinsX() / xRange;
  double normFactor = (nTrials/2.) / binsPerUnit; // to match histogram plot
  // divide by 2 because we only count excess tail contribution to chi2 
  fchi2->SetParameter(0,normFactor);
  fchi2->SetLineColor(kBlue);

  hTestStatistic.Draw();
  fchi2->Draw("same");

  if (llhUseEnergy) {
    TF1 *fchi2_2d = new TF1("fchi2_2d","[0] * (1./2.) * exp(-x/2)",0,50);
    fchi2_2d->SetParameter(0,normFactor);
    fchi2_2d->SetLineColor(kRed);
    fchi2_2d->Draw("same"); 
  }
  gPad->SetLogy(1);


  can->cd(2);
  hLogProb.Draw();
  cout << "Median Log Prob of Max Like: " << histMedian(&hLogProb) << endl;

  can->cd(3);
  gPad->SetLogy(1);
  TH1* logPInt = AscendingCumulate(&hLogProb);
  logPInt->Draw("e");
  double entries = hLogProb.GetEntries();
  TLine *line = new TLine(log10(1./entries),1.,0.,entries);
  line->Draw();

  can->cd(4);
  hPar.Draw();
  gPad->SetLogy(1);

  can->cd(5);
  if (llhUseEnergy) {
    hGammaNs.Draw("box");
  }

}
