{

  bool RELOAD;

  if (!RELOAD) {
    RELOAD = true;
    gROOT->Macro("$LAB_MAIN_DIR/llhTimeDep/loadlibs.C");
    if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

  //  TString macroPath = gROOT->GetMacroPath();
  //  macroPath += gSystem->ExpandPathName("$LAB_MAIN_DIR/macro_llh:");
  //  gROOT->SetMacroPath(macroPath);

  initialize_ran1();
    //if (1) { initialize_ran1(-55); } // seed has to be a *NEGATIVE* integer
    //else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
    //int ranSeed = get_ran1_seed(); // if you want to know what the seed was

    gROOT->ProcessLine(".L Ark.C");

    bool OPT_USEREALDATA = false;

//    I3Ark ark22;
//    gROOT->ProcessLine(".x load_ark_ic22.C(ark22, OPT_USEREALDATA)");

    //I3Ark ark40;
    //gROOT->ProcessLine(".x load_ark_ic40.C(ark59, OPT_USEREALDATA)");

    I3Ark ark59;
    
    //gROOT->ProcessLine(".x load_ark_ic40.C(ark59, OPT_USEREALDATA)");    
    //gROOT->ProcessLine(".x load_ark_ic59_noIT.C(ark59, OPT_USEREALDATA)");
    //gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    //gROOT->ProcessLine(".x load_ark_ic59_softer.C(ark59, OPT_USEREALDATA)");
    gROOT->ProcessLine(".x load_ark_ic59_bugfix.C(ark59, OPT_USEREALDATA)");

  // Source

  //gROOT->ProcessLine(".L AllSky.C");
  //AllSky as;
  //as.SetRange(148, 158, 5, 15);

    /*NewLlhEnergy newllh59;
    newllh59.SetUseEnergy(true);
    newllh59.SetOptimizeAngleDeg(10.);
    newllh59.SetOptimizeTolerance(0.01);
    newllh59.SetMonitorLevel(0);
    newllh59.SetAnalysisSet(ark59.psData); //*/

    NewLlhBoxTime newllh59;
    newllh59.SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(10.);
    newllh59.SetOptimizeTolerance(0.01);
    newllh59.SetMonitorLevel(0);
    newllh59.SetEMaxRatioWarnOnlyOnce(1);
    //newllh59.close_ = 10.;
    newllh59.JimsTerm_ = false;
    newllh59.SpectralPenalty_ = false;
    newllh59.ndof_ = 2.;
    newllh59.SetLivetime(375.);
    newllh59.SetLocalCoordBkgProb(ark59.lcBkgProb);
    newllh59.seedWtMin = 1000.;
      
    gROOT->ProcessLine(".L SimpleFlareAnalysis.C");
  
  }

  //EquatorialDeg testSearch(153.375, 11.375);
  //EquatorialDeg testSearch(343.491,16.148);
  EquatorialDeg testSearch(308.107,40.958); //Cyg X-3
  //EquatorialDeg testSearch(21.35,-0.25);

  double spectralIndex = -3.0;//3.8;

  cout << ark59.tmin << " " << ark59.tmax << endl;

  //double tWindowMin = 54572.;  double tWindowMax = 54574.;
    // E^-2: 2.62 events, 4.09188e-09 GeV/cm^2/s
    // E^-3: 2.94 events, 4.04486e-05 GeV/cm^2/s
  //double tWindowMin = 54772.;  double tWindowMax = 54774.;
    // E^-2: 2.61 events, 4.0773e-09 GeV/cm^2/s
    // E^-3: 2.96 events, 4.0580e-05 GeV/cm^2/s
  //double tWindowMin = 55002.;  double tWindowMax = 55004.;
    // 
    // E^-3:  events,  GeV/cm^2/s
  double tWindowMin = 55317.;  double tWindowMax = 55348.;

  //EquatorialDeg testSearch(166.114,38.209);  double tWindowMin = 55244.;  double tWindowMax = 55245.; // Mrk421
    // 2.36 evts, 2.31935e-09 sens. 4.03 evts, 3.96858e-09 disco
  //EquatorialDeg testSearch(187.706,12.391);  double tWindowMin = 55294.;  double tWindowMax = 55298.; // M87
    // 2.14 evts, 1.5367e-09 sens. 5.03 evts, 3.602e-09 disco
  //EquatorialDeg testSearch( 49.179,41.325);  double tWindowMin = 55150.;  double tWindowMax = 55152.; // IC310
    // 2.41 evts, 2.41471e-09 sens. 4.54 evts, 4.552e-09 disco
  //EquatorialDeg testSearch( 80.479,21.190);  double tWindowMin = 55152.;  double tWindowMax = 55153.; // VER J0521+211
    // 2.29 evts, 1.80823e-09 sens. 4.01 evts, 3.1597e-09 disco



  /*  CygX3 Windows:
   *  54572-4 (2008 04 16-17; IC40)
   *  54772-4 (2008 11 02-03; IC40)
   *  55002-4 (2009 06 20-21; IC59)
   *  55317-55348 (2010 05 01-31; IC59)
   */
  

  TimePdf * tPdf = new BoxTimePdf(ark59.tmin, ark59.tmax, tWindowMin,tWindowMax,1.,0.);
  cout << tPdf->GenerateEventTime().GetMJD() << endl;
  ark59.SetPointSource(testSearch, PowerLawFlux(1.,spectralIndex), tPdf); 
  ark59.psData.GetSource().SetTimeAzBins( ark59.lcBkgProb.nbAz );
  newllh59.SetTimeBounds(tPdf);
  newllh59.SetAnalysis(ark59.psData,testSearch);
  
  // this needs to be done after SetTimeBounds(tPdf) 
  newllh59.SetTimeWindow(tWindowMin,tWindowMax);
  
  //vector<MinuitParDef> pdv;
  //pdv.push_back( MinuitParDef("nSrc",2,0.1, 0,100) );
  //pdv.push_back( MinuitParDef("gamma",2.5,0.5, 1., 4.) );
  //pdv.push_back( MinuitParDef("mean",2.5,0.5, 1., 4.) );
  //pdv.push_back( MinuitParDef("sigma",2.5,0.5, 1., 4.) );
  //maf.SetParDefs(pdv);

  //double llhBest = newllh59.EvaluateLlh(5.2,3.8,54977.,log10(0.3));

  SimpleFlareAnalysis sa;
  sa.SetNDoF(2);
    
  //cout << "Starting trials" << endl;
  //sa.Execute(ark59,newllh59,1000,0);

/* For Testing a specific (unblinded) flare
  newllh59.SetMonitorLevel(0);
  newllh59.MaximizeLlh();
  
  newllh59.SetMonitorLevel(4);
  newllh59.EvaluateLlh(newllh59.GetPar(0),newllh59.GetPar(1),newllh59.GetPar(2),newllh59.GetPar(3)); 
//*/


  //*
  // Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  gROOT->ProcessLine(".L SetDisco.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
  // SetDisco(disco, 15, false, 2.87e-7, 0.5);
   SetDisco(disco, 25, true, 0.5, 0.9);

  gROOT->ProcessLine(".L DetectionStudy.C");
 
  TCanvas *c = DetectionStudy(ark59, newllh59, disco); //*/

  /* Disco (Discovery Potential and Sensitivity Estimator)
  DiscoveryPotential disco;
  
  gROOT->ProcessLine(".L SetDisco.C");
  gROOT->ProcessLine(".L DetectionStudy.C");
  // parameters:  loops, optMedianUpperLimit,  significance,  power);
   SetDisco(disco, 15, false, 2.87e-7, 0.5);
  // SetDisco(disco, 15, true, 0.5, 0.9);
  
  cout << "setting sigmas" << endl;
  double n_disco[12], ldsigmas[12];
  double dsigmas[] = {1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 3e-1, 1., 3., 5., 10, 1e2};
  //double boxsigmas[] = { 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 3e-1, 1., 3., 10, 1e2, 375. };
  
  double tmean;
  
  for (int i=0;i<12;i++) {
    
    //tmean = (ark59.tmax+ark59.tmin)/2. - boxsigmas[i]/2.;
    TimePdf * tPdf = new GaussianTimePdf(ark59.tmin, ark59.tmax, 55250.,dsigmas[i],1.);
    //TimePdf * tPdf = new SpikeTimePdf(ark59.tmin, ark59.tmax, tmean,tmean+boxsigmas[i],1.,0.);
    ark59.SetPointSource(testSearch, PowerLawFlux(1.,spectralIndex), tPdf);
    ark59.psData.GetSource().SetTimeAzBins( ark59.lcBkgProb.nbAz );
    newllh59.SetTimeBounds(tPdf);
  
    n_disco[i] = DetectionStudy_d(ark59, newllh59, disco);
    
    //ldsigmas[i] = log10(boxsigmas[i]);    cout << boxsigmas[i] << " " << n_disco[i] << endl;
    ldsigmas[i] = log10(dsigmas[i]);     cout << dsigmas[i] << " " << n_disco[i] << endl;
  
  }
  
  TGraph * g = new TGraph(12,ldsigmas,n_disco);
  g->Draw("AL"); //*/
  
 
  return 1; // signal correct finish of script
}
