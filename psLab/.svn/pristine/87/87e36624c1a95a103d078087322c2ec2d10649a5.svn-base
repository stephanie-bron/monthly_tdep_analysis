// Variables declared outside the functions will have global scope
// and can be accessed after function exit.
//
// Note that if they are declared again (either by re-running this 
// script or another one which declares the same variables)
// their values may be reset, and should not be relied upon.

TH2D *hAllSkyCoarse;
TH2D *hAllSkyFine;
TCanvas *canAllSkyCoarse;
TCanvas *canAllSkyFine;
double decDegMax;
double raDegMax;
double resultMax;
double nsBest;
double gammaBest;
double llhBest;


// Default macro, gives user instructions

void macro_AllSky() {
  cout << "Usage:\n";
  cout << ".x macro_AllSky.C(double raLow = 0., double raHigh = 360.,\n";
  cout << "                  double decLow = -85., double decHigh = 85.,\n";
  cout << "                  int coarseBinsPerDeg = 2, int fineBinsPerDeg = 10)\n";
}


void macro_AllSky(double raLow = 0., double raHigh = 360.,
		  double decLow = -85., double decHigh = 85.,
		  int coarseBinsPerDeg = 2, int fineBinsPerDeg = 10)
{
  extern I3Analysis psData;
  extern AnalysisLlh *llhPtr;

  gStyle->SetPalette(1);
  //  CreatePalette(5);

  bool optBatch = false;   // if set to true, will skip drawing plots

  // SET COARSE BINNING
  int nBinsCoarseRa = (raHigh-raLow)*coarseBinsPerDeg;
  int nBinsCoarseDec = (decHigh-decLow)*coarseBinsPerDeg;

  // SET FINE BINNING
  int nBinsFineRa = (raHigh-raLow)*fineBinsPerDeg;
  int nBinsFineDec = (decHigh-decLow)*fineBinsPerDeg;

  // SET -LOG_P VALUE FOR FINE-BINNED FOLLOW-UP
  double resultThreshold = 1.5;


  if (gDirectory->Get("hAllSkyCoarse")) {
    delete gDirectory->Get("hAllSkyCoarse"); }
  hAllSkyCoarse = new TH2D("hAllSkyCoarse","hAllSkyCoarse",
			   nBinsCoarseRa,raLow,raHigh,
			   nBinsCoarseDec,decLow,decHigh);
  cout << "Coarse Grid: RA Bins: " << nBinsCoarseRa;
  cout << "   Dec Bins: " << nBinsCoarseDec << endl;

  if (gDirectory->Get("hAllSkyFine")) {
    delete gDirectory->Get("hAllSkyFine"); }

  hAllSkyFine = new TH2D("hAllSkyFine","hAllSkyFine",
			 nBinsFineRa,raLow,raHigh,
			 nBinsFineDec,decLow,decHigh);
  cout << "Fine Grid:   RA Bins: " << nBinsFineRa;
  cout << "   Dec Bins: " << nBinsFineDec << endl;

  cout << "\nResult Threshold for fine-grid follow-up: " << resultThreshold;
  cout << "\n";


  //
  // COARSE GRID
  //

  resultMax = 0.;
  for (int iDec=1; iDec<=nBinsCoarseDec; ++iDec) {
    double decDeg = hAllSkyCoarse->GetYaxis()->GetBinCenter(iDec);
    if (!optBatch) { cout << decDeg << "  " << flush; }

    for (int iRa=1; iRa<=nBinsCoarseRa; ++iRa) {
      double raDeg = hAllSkyCoarse->GetXaxis()->GetBinCenter(iRa);
      
      EquatorialDeg searchLocation(raDeg,decDeg);
      llhPtr->SetAnalysis(psData,searchLocation);
      llhPtr->MaximizeLlh();

      double result = -log10(llhPtr->GetEstProb());
      hAllSkyCoarse->SetBinContent(iRa, iDec, result);

      if (result>resultMax) { 
	resultMax = result;
	decDegMax = decDeg;
	raDegMax = raDeg;
	nsBest = llhPtr->GetPar(0);
	gammaBest = llhPtr->GetPar(1);
	llhBest = llhPtr->Get_logLambdaBest();
      }
    }
  }
  cout << endl;

  if (!optBatch) {
    // only make new canvas if it didn't already exist:
    canAllSkyCoarse = dynamic_cast<TCanvas*> 
      ( gROOT->GetListOfCanvases()->FindObject("canAllSkyCoarse") );
    if ( !canAllSkyCoarse ) {
      canAllSkyCoarse =
	new TCanvas("canAllSkyCoarse","canAllSkyCoarse",800,400);
    }

    canAllSkyCoarse->cd();
    hAllSkyCoarse->Draw("colz");
    canAllSkyCoarse->Update();
  }  

  cout << "Coarse Grid Hottest Spot:\n";
  cout << "   Ra: " << raDegMax << " , Dec: " << decDegMax << endl;
  cout << "   logLambda =  " << llhBest << "      ";
  cout << "   -log10(p) =  " << resultMax << endl;
  cout << "          ns = " << nsBest << endl;
  cout << "       gamma = " << gammaBest << "\n\n";


  //
  // FINE GRID
  //

  // keep same resultMax from above:
  // in case no coarse bin is over threshold, the max results from above
  // still apply

  for (int iDec=1; iDec<=nBinsFineDec; ++iDec) {
    double decDeg = hAllSkyFine->GetYaxis()->GetBinCenter(iDec);
    if (!optBatch) { cout << decDeg << "  " << flush; }

    for (int iRa=1; iRa<=nBinsFineRa; ++iRa) {
      double raDeg = hAllSkyFine->GetXaxis()->GetBinCenter(iRa);

      double result;

      // Check if follow-up required
      double coarseResult = 
	hAllSkyCoarse->GetBinContent( hAllSkyCoarse->FindBin(raDeg,decDeg) );

      if (coarseResult > resultThreshold) {
	EquatorialDeg searchLocation(raDeg,decDeg);
	llhPtr->SetAnalysis(psData,searchLocation);
	llhPtr->MaximizeLlh();
	result = -log10(llhPtr->GetEstProb());

	if (result>resultMax) { 
	  resultMax = result;
	  decDegMax = decDeg;
	  raDegMax = raDeg;
	  nsBest = llhPtr->GetPar(0);
	  gammaBest = llhPtr->GetPar(1);
	  llhBest = llhPtr->Get_logLambdaBest();
	}
      } else {
	result = coarseResult;
      }

      hAllSkyFine->SetBinContent(iRa, iDec, result);

    }
  }

  cout << endl;

  if (!optBatch) {
    // only make new canvas if it didn't already exist:
    canAllSkyFine = dynamic_cast<TCanvas*> 
      ( gROOT->GetListOfCanvases()->FindObject("canAllSkyFine") );
    if ( !canAllSkyFine ) {
      canAllSkyFine = 
	new TCanvas("canAllSkyFine","canAllSkyFine",20,40,800,400);
    }

    canAllSkyFine->cd();
    hAllSkyFine->Draw("colz");
    canAllSkyFine->Update();
  }

  cout << "Fine Grid Hottest Spot:\n";
  cout << "   Ra: " << raDegMax << " , Dec: " << decDegMax << endl;
  cout << "   logLambda =  " << llhBest << "      ";
  cout << "   -log10(p) =  " << resultMax << endl;
  cout << "          ns = " << nsBest << endl;
  cout << "       gamma = " << gammaBest << "\n\n";
}
