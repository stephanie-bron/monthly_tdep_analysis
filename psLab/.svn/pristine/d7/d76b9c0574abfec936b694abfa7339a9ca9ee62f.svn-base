// Okay, I want a simple way of plotting the events which contribute
// near the source location.

//should assume I've already loaded the unblinded data + source events (ark40 + ark59).

{

  //figpaper1();
  gStyle->SetTextFont(4);

  bool RELOAD;

  if (!RELOAD) {
    RELOAD = true;
    gROOT->Macro("$LAB_MAIN_DIR/llhTimeDep/loadlibs.C");
    if (!LOADSUCCESS) { return 0.; } // stop, and signal that script failed.

    if (1) { initialize_ran1(-55); } // seed has to be a *NEGATIVE* integer
    else   { initialize_ran1(); }  // or, no seed = initialize to ran clock time
    int ranSeed = get_ran1_seed(); // if you want to know what the seed was
    gROOT->ProcessLine(".L $LAB_MAIN_DIR/macro_llh/ic79/ArkTime.C");

    bool OPT_USEREALDATA = true;
    
    gROOT->ProcessLine(".L TreeLoader_IC79_Final.C");
    gROOT->ProcessLine(".L TreeLoader_IC59_Final.C");
    gROOT->ProcessLine(".L TreeLoader_IC40_CutA6_Fix_final.C");
    
    gROOT->ProcessLine(".L mpfSigmaDegRescaledIC79V2.C+");
    gROOT->ProcessLine(".L mpfSigmaDegRescaledIC59.C+");
    gROOT->ProcessLine(".L mpfSigmaDegRescaled2.C+");
    

    I3Ark ark40;
    gROOT->ProcessLine(".x load_ark_ic40.C(ark40, OPT_USEREALDATA)");

    I3Ark ark59;
    //gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    gROOT->ProcessLine(".x load_ark_ic59_BDT.C(ark59, OPT_USEREALDATA)");
    
    I3Ark ark79;
    //gROOT->ProcessLine(".x load_ark_ic59_IT2.C(ark59, OPT_USEREALDATA)");
    gROOT->ProcessLine(".x load_ark_ic79_Final.C(ark79, OPT_USEREALDATA)");
    
    MultiArk mark;
    mark.AddArk(ark40);
    mark.AddArk(ark59);
    mark.AddArk(ark79);
    
  } //*/

  bool optEnergy = true;

  MultiArk new_ark = mark;

int nsrc=4;


string nstring;
int n;

double dist;
double mjd;
double tmin = 0.;
double tmax = 1.;
int tbins = 100.;

double nsrc_best, g, eweight, w, w1;
int ntimes;
vector<double> dvect;
const Coord *cc;
EquatorialDeg *cceq;

vector<I3Event> eventVector;

  string srcstr[8];
  EquatorialDeg testSearch1[8];
  double period[8], t0[8];
       
    testSearch1[0].SetCoords(308.107,40.958); //Cyg X-3
    testSearch1[1].SetCoords(287.957, 4.983); //SS433
    testSearch1[2].SetCoords(299.591,35.202); // Cyg X-1
    testSearch1[3].SetCoords( 40.132,61.229); // Lsi+61
    testSearch1[4].SetCoords(288.798,10.946); //GRS 1915+105
    testSearch1[5].SetCoords(169.545,48.037); //XTE J1118+480
    testSearch1[6].SetCoords( 65.428,32.907); //GRO J0422+32
    testSearch1[7].SetCoords( 90.550, 5.80 ); //HESSJ0632+057

    period[0] = 0.199679;     srcstr[0] = "Cygnus X3     "; t0[0]=54896.693;
    period[1] = 13.08211;     srcstr[1] = "SS433         "; t0[1]=50023.62;
    period[2] = 5.5929;       srcstr[2] = "Cygnus X1     "; t0[2]=41874.707;
    period[3] = 26.498;       srcstr[3] = "LSI+61 303  "; t0[3]=43366.775; //(radio zero)
    period[4] = 30.8;         srcstr[4] = "GRS1915+105  "; t0[4]=53945.7;
    period[5] = 0.1699339;    srcstr[5] = "XTEJ1118+480 "; t0[5]=52287.9929;
    period[6] = 0.212140;     srcstr[6] = "GROJ0422+32  "; t0[6]=50274.4156;
    period[7] = 320.;         srcstr[7] = "HESSJ0632+057";  t0[7]=54857.0;
    

  NewLlhPeriodicTime newllh40[8];
  NewLlhPeriodicTime newllh59[8];
  NewLlhPeriodicTime newllh79[8];
  MultiPeriodicAnalysisFn maf[8];
  NewLlhPeriodicTime_ParTranslator pt[8];

  bool useE = true;
  int monLev = 0;
  
    bool jT = true; double nd = 3.; 
    double wp = 1.;
 
  TimePdf * tPdf[8];

  for (int i=nsrc;i<(nsrc+1);i++) {
  
    newllh40[i].SetUseEnergy(true);
    //newllh40.SetOptimizeAngleDeg(6.);
    newllh40[i].SetOptimizeTolerance(0.01);
    newllh40[i].SetMonitorLevel(monLev);
    newllh40[i].SetEMaxRatioWarnOnlyOnce(1);
    newllh40[i].close_ = 10.;
    newllh40[i].JimsTerm_ = jT; newllh40[i].ndof_ = nd;
    newllh40[i].SpectralPenalty_ = false;
    newllh40[i].SetLivetime(1.);
    newllh40[i].SetWeightPower(wp);
    //    newllh40.SetAnalysisSet(ark40.psData);
    //    newllh40[i].SetTimePeriodic(period[i],t0[i]);
    //newllh40.SetLocalCoordBkgProb(ark40.lcBkgProb);

    newllh59[i].SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(6.);
    newllh59[i].SetOptimizeTolerance(0.01);
    newllh59[i].SetMonitorLevel(monLev);
    newllh59[i].SetEMaxRatioWarnOnlyOnce(1);
    newllh59[i].close_ = 10.;
    newllh59[i].JimsTerm_ = jT; newllh59[i].ndof_ = nd;
    newllh59[i].SpectralPenalty_ = false;
    newllh59[i].SetLivetime(1.);
    newllh59[i].SetWeightPower(wp);
    //    newllh59.SetAnalysisSet(ark59.psData);
    //    newllh59[i].SetTimePeriodic(period[i],t0[i]);
    //newllh59.SetLocalCoordBkgProb(ark59.lcBkgProb);
    
    newllh79[i].SetUseEnergy(true);
    //newllh59.SetOptimizeAngleDeg(6.);
    newllh79[i].SetOptimizeTolerance(0.01);
    newllh79[i].SetMonitorLevel(monLev);
    newllh79[i].SetEMaxRatioWarnOnlyOnce(1);
    newllh79[i].close_ = 10.;
    newllh79[i].JimsTerm_ = jT; newllh79[i].ndof_ = nd;
    newllh79[i].SpectralPenalty_ = false;
    newllh79[i].SetLivetime(1.);
    newllh79[i].SetWeightPower(wp);
    //    newllh59.SetAnalysisSet(ark59.psData);
    //    newllh59[i].SetTimePeriodic(period[i],t0[i]);
    //newllh59.SetLocalCoordBkgProb(ark59.lcBkgProb);
    
      
    //maf[i].AddAnalysisFn(&newllh22[i]);
    maf[i].AddAnalysisFn(&newllh40[i]);
    maf[i].AddAnalysisFn(&newllh59[i]);
    maf[i].AddAnalysisFn(&newllh79[i]);
    maf[i].SetTimePeriodic(period[i],t0[i]);
    maf[i].seedWtMin = 200.; // (WAS 10)
    maf[i].SetSearchCoord(testSearch1[i]);
        
    //gSystem->ProcessLine(".L mqso.teststat.10k.nts.root");
    //maf[i].SetNullTestStat(hTestStatistic);
  
    //EquatorialDeg testSearch(153.375, 11.375);
    //EquatorialDeg testSearch(343.491,16.148);

//      double meanBest[8], sigmaBest[8];
//   meanBest[0]=0.82;     sigmaBest[0]=0.0128;
//   meanBest[1]=0.554;	sigmaBest[1]=0.005;
//   meanBest[2]=0.0654;	sigmaBest[2]=1;
//   meanBest[3]=0.945;	sigmaBest[3]=0.0615;
//   meanBest[4]=0.608;	sigmaBest[4]=0.0485;
//   meanBest[5]=0.867;	sigmaBest[5]=0.208;
//   meanBest[6]=0.644;	sigmaBest[6]=0.224;
//   meanBest[7]=0.605;	sigmaBest[7]=0.196;
//   
//   TimePdf * tPdf[i] = new PeriodicGaussianTimePdf(0., 1., meanBest[nsrc], sigmaBest[nsrc],1.);
    
    
    TimePdf * tPdf[i] = new PeriodicGaussianTimePdf(0., 1., 0.5,1e-1,1.);
    cout << tPdf[i]->GenerateEventTime().GetMJD() << endl;
      
    newllh40[i].SetAnalysis(ark40.psData, testSearch1[i]);
    newllh59[i].SetAnalysis(ark59.psData, testSearch1[i]);
    newllh79[i].SetAnalysis(ark79.psData, testSearch1[i]);
  
    mark.SetPointSource(testSearch1[nsrc], PowerLawFlux(1.,-2.), tPdf[i]);
    

 
//    NewLlhPeriodicTime_ParTranslator pt[i];
    pt[i].SetRange(1,4,31);
//    pt[i].SetTranslator(mas[i]);
// cout << "setting translator psData " << i << endl;
    pt[i].SetTranslator(dynamic_cast<MultiAnalysisSet*>(mark.psData));
// cout << "setting translator to maf " << i << endl;  
    maf[i].SetParTranslator(&pt[i]);  
  
  } // end of AnalysisFn Load Loop

  int nTrials = 1000;
  int nSrcEvents = 0;

  //TStopwatch ts;
  double pmin=1.;
  double pvalue[9];
  int bestSource;
  double phas;
  
  double nsrc_best, gamma, eweight;
  vector<Time> tvect;
  double sRatio;
  vector<I3Event> eventVector;


  TH1D * weightTimes = new TH1D("weightTimes","weightTimes",tbins,tmin,tmax);
  TH1D * bkgTimes = new TH1D("bkgTimes","bkgTimes",tbins,tmin,tmax);
  //TH1D * srcTimes = new TH1D("srcTimes","srcTimes",tbins,tmin,tmax);
  //srcTimes->SetLineColor(2);
 
  //tPdfsrc.livetimeTotal = livetime/86400.;


  TCanvas* c1 = new TCanvas("c1","c1",1000,500);
  c1.SetLogy(1);
  c1.SetGridx();
  c1.SetTicky();
  weightTimes->SetTitle("");
  weightTimes->GetYaxis()->SetTitle("Time-Independent Event Weight");
  weightTimes->GetXaxis()->SetTitle("Event Phase");
  weightTimes->GetYaxis()->SetRangeUser(9.,1e5);
  //weightTimes->GetYaxis()->SetRangeUser(0.1,5.);
  //weightTimes->GetYaxis()->SetMaximum(1e4);
  weightTimes->Draw();

  if (OPT_USEREALDATA) { 
    mark.psData.UseRealData(); 
  } else { 
    mark.psData->GenerateDataSet_with_nSrcEvents(0);
  }

//    for (int i=0;i<8;i++) {

  //maf[nsrc].SetAnalysis( dynamic_cast<MultiAnalysisSet*>(mark.psData), testSearch1[nsrc] );
  //maf[nsrc].SetSearchCoord( testSearch1[nsrc] );
  //cout << srcstr[nsrc] << endl;
  maf[nsrc].MaximizeLlh();

  pvalue[nsrc] = maf[nsrc].GetEstProb();

  PeriodicGaussianTimePdf tPdfsrc(0., 1., maf[nsrc].Get_meanBest(), maf[nsrc].Get_sigmaBest(),1.);
  tPdfsrc.fillHisto(10000);

  //cout << maf[nsrc].Get_sigmaBest() << " " << flush;

/*  if (OPT_USEREALDATA) {
    cout.precision(3);
    cout << srcstr[nsrc] << "| (" << testSearch1[nsrc].GetRa() << "," << testSearch1[nsrc].GetDec() << ") " << maf[nsrc].GetEstProb() << " | " << maf[nsrc].GetTestStatistic() << " " << maf[nsrc].GetPar(0) << " " << maf[nsrc].GetPar(1) << " " << maf[nsrc].Get_meanBest() << " " << maf[nsrc].Get_sigmaBest() << endl;
  } */
      
  nsrc_best = maf[nsrc].GetPar(0);
  gamma = maf[nsrc].GetPar(1);

  eventVector = maf[nsrc].GetAllEvents();

  for (unsigned int j=0;j<eventVector.size();j++){
    eweight = 1.;
    sRatio = eventVector[j].ProbFrom(testSearch1[nsrc]) / eventVector[j].GetBkgSpaceProbFn()->GetBkgProbDensity(eventVector[j]);
    if (gamma>=1.) { eweight = eventVector[j].GetEnergyProbFn()->GetEnergyProbGamma(eventVector[j],gamma)/eventVector[j].GetEnergyProbFn()->GetEnergyProbBkg(eventVector[j]); }
    if (sRatio*eweight > 20.){
/*      cout.precision(4);
      cout << "    " << sRatio << " " << eventVector[j].GetParams().energyValue << " " << eweight << " " << eweight*sRatio << " " << eventVector[j].GetParams().runID << " " << eventVector[j].GetParams().eventID << " " << eventVector[j].GetParams().parafitSigmaDeg << " " << eventVector[j].GetEquatorialDeg().GetRa() << " " << eventVector[j].GetEquatorialDeg().GetDec() << " " << eventVector[j].GetEquatorialDeg().DistanceTo(testSearch1[nsrc]) << " "; */
           
          
      phas = fmod(eventVector[j].GetMJD() - t0[nsrc],period[nsrc])/period[nsrc];
      if (phas<0) { phas = phas+1.0; }
      //cout << phas << " " << sRatio << " " << flush;
           
      l = new TLine(phas, 9., phas, sRatio*eweight);  
      l->SetLineWidth(1);
      l->SetLineColor(4);
      if ( eventVector[j].GetMJD() > 54910.5 ) { l->SetLineColor(3); }
      if ( eventVector[j].GetMJD() > 55350.0 ) { l->SetLineColor(2); }
      l->Draw();
    }
  }
  
  la = new TLine(phas, 0., phas, sRatio);
  la->SetLineColor(4);
  lb = new TLine(phas, 0., phas, sRatio);    
  lb->SetLineColor(3);
  lc = new TLine(phas, 0., phas, sRatio);    
  lc->SetLineColor(2);

double norm = tPdfsrc.GetNorm();
tPdfsrc->GetHisto()->Scale(15e4*maf[nsrc].Get_sigmaBest()*norm);
tPdfsrc->GetHisto()->SetLineWidth(2);
tPdfsrc->GetHisto()->SetLineColor(1);
tPdfsrc->GetHisto()->Draw("same");

leg = new TLegend(0.45,0.75,0.85,0.88);
leg->AddEntry(la,"IceCube Events (IC40)","l");
leg->AddEntry(lb,"IceCube Events (IC59)","l");
leg->AddEntry(lc,"IceCube Events (IC79)","l");
leg->AddEntry(tPdfsrc->GetHisto(),"Best-Fit Gaussian","l");
//leg->AddEntry(ll,"Best-Fit Threshold","l");
leg->SetFillColor(0);
leg->Draw();

TString savestr = "mqso/"+nsrc+"_unblindresult.png";
//c1->SaveAs(savestr);

//DateAxis_forPaper(c1);

}
