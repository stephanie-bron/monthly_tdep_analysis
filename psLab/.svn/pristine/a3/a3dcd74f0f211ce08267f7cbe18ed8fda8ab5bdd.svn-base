
class SimpleFlareAnalysis {
 public:
  TH1D hTestStatistic;
  TH1D hLogProb;
  TH1D hPar;
  TH2D hGammaNs;
  TH1D hLogPInt;
  TH1D hSigmaMin;
  TCanvas* can;
  int ndof_;

  SimpleFlareAnalysis() : can(NULL) , ndof_(2) { }
  ~SimpleFlareAnalysis() { }

  void Usage();
  void SetNDoF(int ndof) { ndof_ = ndof; }
  void Execute(I3Ark& ark, NewLlhGausTime& llh, int nTrials, int nSrcEvents);
  void Execute(I3Ark& ark, NewLlhBoxTime& llh, int nTrials, int nSrcEvents);
  bool Write(char *filename, char* fileoption);
};


void SimpleFlareAnalysis::Usage() {
  cout << "SimpleFlareAnalysis sa;\n";
  cout << "sa.SetNDoF(int ndof);   // default degrees of freedom is 2\n";
  cout << "sa.Execute(Ark& ark, Analysis& llh,\n"
          "           int nTrials, int nSrcEvents = 0)\n";
}


void SimpleFlareAnalysis::Execute(I3Ark& ark, NewLlhGausTime& llh, 
			     int nTrials, int nSrcEvents)
{

//  NewLlhGausTime llh = dynamic_cast<NewLlhGausTime> llh1;

  llh.SetAnalysisSet(ark.psData);
  llh.SetSearchCoord(ark.mySrcLocation);

  hTestStatistic.Reset();
  hLogProb.Reset();
  hPar.Reset();
  hGammaNs.Reset();
  hLogPInt.Reset();
  hSigmaMin.Reset();

  hTestStatistic.SetBins(100,0,1);
  hTestStatistic.SetTitle(";2 ln #lambda;trials");
  hLogProb.SetBins(100,-1,1);
  hLogProb.SetTitle(";log_{10} Prob;trials");
  hPar.SetBins(100,-1,1);
  hPar.SetTitle(";nSrcBest; trials");
  hGammaNs.SetBins(90,-6,3,90,-6,3);
  //hGammaNs.SetBins(200,ark.tmin,ark.tmax,90,-6,3);
  hGammaNs.SetTitle(";nSrcBest;gammaBest");
  hSigmaMin.SetBins(100,-9,1);

  // Let Root figure out how to extend the bin range automatically
  hTestStatistic.SetBit(TH1::kCanRebin);
  hLogProb.SetBit(TH1::kCanRebin);
  hPar.SetBit(TH1::kCanRebin);
//  hGammaNs.SetBit(TH1::kCanRebin);

  //
  // MAIN LOOP
  //

  CountMonitor countMon(10.,nTrials);
  for (int i=0; i<nTrials; ++i) {
    ark.psData->GenerateDataSet_with_nSrcEvents(nSrcEvents);
    llh.MaximizeLlh();

    hTestStatistic.Fill(llh.GetTestStatistic() * 2.);
    hLogProb.Fill(log10(llh.GetEstProb()));
    hPar.Fill(llh.GetPar(0));
    if (ndof_==3) {
      //hGammaNs.Fill(llh.GetPar(0),llh.GetPar(1));
      //hGammaNs.Fill(llh.GetPar(2),llh.GetPar(3));
      hGammaNs.Fill( log10(llh.GetSigmaGuess()), llh.GetPar(3) );
      hSigmaMin.Fill( log10( llh.GetSigmaMin() ) );
    }
    countMon.UpdateCount();
  }

  //
  // PLOT OUTPUT
  //

  // only make new canvas if it didn't already exist:
  //
  //  can = dynamic_cast<TCanvas*> 
  //    ( gROOT->GetListOfCanvases()->FindObject("canSimpleFlareAnalysis") );
  if ( !can ) {
    can =
      new TCanvas("canSimpleFlareAnalysis","canSimpleFlareAnalysis",20,20,950,650);
    can->Divide(3,2,0.005,0.005);
    for (int i=0; i<6; ++i) {
      can->cd(i);
      gPad->SetRightMargin(0.01);
      gPad->SetTopMargin(0.01);
    }
  }

  can->cd(1);



  TF1 *fchi2 = new TF1("fchi2","[0] * pow(x, [1]/2 - 1)*exp(-x/2.)/pow(2,[1]/2)*TMath::Gamma([1]/2.)", 0, 50);
	
  double xRange = hTestStatistic.GetXaxis()->GetXmax() -
    hTestStatistic.GetXaxis()->GetXmin();
  double binsPerUnit = hTestStatistic.GetNbinsX() / xRange;
  double normFactor = (nTrials/2.) / binsPerUnit; // to match histogram plot
  // divide by 2 because we only count excess tail contribution to chi2 
  fchi2->SetParameter(0,normFactor);
  fchi2->SetParameter(1,ndof_);  //Set the DoF
  fchi2->SetLineColor(kBlue);

  hTestStatistic.Draw();
  fchi2->Draw("same");

  gPad->SetLogy(1);



  can->cd(2);
  hLogProb.Draw();
  cout << "Median Log Prob of Max Like: " << histMedian(&hLogProb) << endl;

  can->cd(3);
  gPad->SetLogy(1);
  hLogPInt = hLogProb;  // first make binning the same
  AscendingCumulate(&hLogProb, &hLogPInt);
  hLogPInt.Draw("e");
  double entries = hLogProb.GetEntries();
  TLine *line = new TLine(log10(1./entries),1.,0.,entries);
  line->Draw();

  can->cd(4);
  hPar.Draw();
  gPad->SetLogy(1);

  can->cd(5);
  if (ndof_==3) {
    hGammaNs.Draw("colz");
  }
  
  can->cd(6);
  if (ndof_==3) {
    hSigmaMin.Draw();
  }
  
}

void SimpleFlareAnalysis::Execute(I3Ark& ark, NewLlhBoxTime& llh, 
			     int nTrials, int nSrcEvents)
{

//  NewLlhGausTime llh = dynamic_cast<NewLlhGausTime> llh1;

  llh.SetAnalysisSet(ark.psData);
  llh.SetSearchCoord(ark.mySrcLocation);

  // find out if energy is being used (changes # of degrees of freedom)
  //if (ndof_<1 || ndof_>2) {
  //  cout << "ndof==" << ndof_ << " not allowed right now.  Setting to 1.\n";
  //  ndof_ = 1;
  //}

  hTestStatistic.Reset();
  hLogProb.Reset();
  hPar.Reset();
  hGammaNs.Reset();
  hLogPInt.Reset();
  hSigmaMin.Reset();

  hTestStatistic.SetBins(100,0,1);
  hTestStatistic.SetTitle(";2 ln #lambda;trials");
  hLogProb.SetBins(100,-1,1);
  hLogProb.SetTitle(";log_{10} Prob;trials");
  hPar.SetBins(100,-1,1);
  hPar.SetTitle(";nSrcBest; trials");
  hGammaNs.SetBins(90,-6,3,90,-6,3);
  //hGammaNs.SetBins(200,ark.tmin,ark.tmax,90,-6,3);
  hGammaNs.SetTitle(";nSrcBest;gammaBest");
  hSigmaMin.SetBins(100,-9,1);

  // Let Root figure out how to extend the bin range automatically
  hTestStatistic.SetBit(TH1::kCanRebin);
  hLogProb.SetBit(TH1::kCanRebin);
  hPar.SetBit(TH1::kCanRebin);
//  hGammaNs.SetBit(TH1::kCanRebin);

  //
  // MAIN LOOP
  //

  CountMonitor countMon(10.,nTrials);
  for (int i=0; i<nTrials; ++i) {
    ark.psData->GenerateDataSet_with_nSrcEvents(nSrcEvents);
    llh.MaximizeLlh();

    hTestStatistic.Fill(llh.GetTestStatistic() * 2.);
    hLogProb.Fill(log10(llh.GetEstProb()));
    hPar.Fill(llh.GetPar(0));
    hGammaNs.Fill(llh.GetPar(0),llh.GetPar(1));
    if (ndof_==3) {
      //hGammaNs.Fill(llh.GetPar(0),llh.GetPar(1));
      //hGammaNs.Fill(llh.GetPar(2),llh.GetPar(3));
      //hGammaNs.Fill( log10(llh.GetSigmaGuess()), llh.GetPar(3) );
      //hSigmaMin.Fill( log10( llh.GetSigmaMin() ) );
    }
    countMon.UpdateCount();
  }

  //
  // PLOT OUTPUT
  //

  // only make new canvas if it didn't already exist:
  //
  can = dynamic_cast<TCanvas*> 
    ( gROOT->GetListOfCanvases()->FindObject("canSimpleFlareAnalysis") );
  if ( !can ) {
    can =
      new TCanvas("canSimpleFlareAnalysis","canSimpleFlareAnalysis",20,20,950,650);
    can->Divide(3,2,0.005,0.005);
    for (int i=0; i<6; ++i) {
      can->cd(i);
      gPad->SetRightMargin(0.01);
      gPad->SetTopMargin(0.01);
    }
  }

  can->cd(1);


  TF1 *fchi2 = new TF1("fchi2","[0] * pow(x, [1]/2 - 1)*exp(-x/2.)/pow(2,[1]/2)*TMath::Gamma([1]/2.)", 0, 50);
  double xRange = hTestStatistic.GetXaxis()->GetXmax() -
    hTestStatistic.GetXaxis()->GetXmin();
  double binsPerUnit = hTestStatistic.GetNbinsX() / xRange;
  double normFactor = (nTrials/2.) / binsPerUnit; // to match histogram plot
  // divide by 2 because we only count excess tail contribution to chi2 
  fchi2->SetParameter(0,normFactor);
  fchi2->SetParameter(1, ndof_);
  fchi2->SetLineColor(kBlue);

  hTestStatistic.Draw();
  fchi2->Draw("same");

  gPad->SetLogy(1);


  can->cd(2);
  hLogProb.Draw();
  cout << "Median Log Prob of Max Like: " << histMedian(&hLogProb) << endl;

  can->cd(3);
  gPad->SetLogy(1);
  hLogPInt = hLogProb;  // first make binning the same
  AscendingCumulate(&hLogProb, &hLogPInt);
  hLogPInt.Draw("e");
  double entries = hLogProb.GetEntries();
  TLine *line = new TLine(log10(1./entries),1.,0.,entries);
  line->Draw();

  can->cd(4);
  hPar.Draw();
  gPad->SetLogy(1);

  can->cd(5);
  if (ndof_==3) {
    hGammaNs.Draw("colz");
  }
  
  can->cd(6);
  if (ndof_==3) {
    hSigmaMin.Draw();
  }
  
}

bool SimpleFlareAnalysis::Write(char*filename, char* fileoption) {
  TFile *fileOutput = new TFile(filename, fileoption);
  if (fileOutput->IsZombie()) {
    cout << "Try using 'recreate' option?\n";
    return false; // no file saved                                                                                                                                                                          
  }

  cout << "Writing Histograms  to: " << filename << endl;

  hTestStatistic.Write("hTestStatistic");
  hLogProb.Write("hLogProb");
  hLogPInt.Write("hLogPInt");
  hPar.Write("hPar");
  hGammaNs.Write("hGammaNs");
  hSigmaMin.Write("hSigmaMin");
  
  fchi2->Write("fchi2");

  fileOutput->Close();
  return true;  // file saved (apparently!)                                                                                                                                                                 
}
