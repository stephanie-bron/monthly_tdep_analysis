
void load_ark_ic22(I3Ark& ark, bool opt_UseRealData) {
  // For now, this is where the meta-TTree loading scripts are:
  gROOT->ProcessLine(".L LoadTreeFns_IC22.C");

  cout << "\n-----  LOADING IC-22  -----\n";


  //
  // CONFIGURE EVENTLOADER WITH BACKGROUND / REAL DATA SAMPLE
  //

  LoadTree_sepIC22_finalCutData_extuple();

  ark.evLoader.SetBkgTree( LoadTree_sepIC22_finalCutData_extuple() );
  ark.livetime = GetValueFromTree(ark.evLoader.GetBkgTree(),"livetimeTotal");
  ark.tmin = GetValueFromTree(ark.evLoader.GetBkgTree(),"tmin");
  ark.tmax = GetValueFromTree(ark.evLoader.GetBkgTree(),"tmax");
  
  ark.evLoader.SetBkgLoadMethod_Exact();
    
  if (opt_UseRealData) {
    ark.evLoader.SetTimeMethod_Actual("timeMJD"); 
    cout << "Will load  * * * U N B L I N D E D * * *  Base Data!\n";
  }
  else {
    ark.evLoader.SetTimeMethod_Scramble();  // for blindness!
    cout << "Will load scrambled times for Base Data.\n";
  }

  cout << "Livetime (Days): " << ark.livetime/86400. << "\n";


  //
  // CONFIGURE EVENTLOADER WITH SIGNAL SIMULATION DATA SAMPLE
  //
  // evLoader will load signal events for any specified declination

  cout << "Configuring Source Event Sample...\n";

  ark.sourceZenWidthDeg = 4.;

  ark.evLoader.SetSourceTree( LoadTree_mayIC22_nugen651_extuple() );
  ark.evLoader.SetSourceZenWidthDeg(ark.sourceZenWidthDeg);


  //
  // SPECIFY CUTS
  //

  TCut ic22_Cut = "g32Zd>80 && pf32PbfStatus==0 && pf32SigmaDeg<3 && !(g32Rlogl>7.8 && g32NdirC<7) && !(g32Rlogl>8.5 && g32NdirC<8) && g32umLogl-g32Logl>15 && sZenMinDeg>70 && b32Logl-g32Logl>30 && g32Rlogl<9.5";

  // Cuts can be added or reset any time, and events re-loaded with new cuts
  // (cuts are also evaluated in order, for possible efficiency gain)

  ark.evLoader.AddCut(ic22_Cut);


  //
  // SET NAMES OF VARIABLES TO BE USED FROM ROOT FILES
  //

  ark.evLoader.SetName_recoZenith_rad("g32Zr");
  ark.evLoader.SetName_recoAzimuth_rad("g32Ar");
  ark.evLoader.SetName_sigmaDeg("pf32SigmaDeg");
  ark.evLoader.SetName_runID("RunID");
  ark.evLoader.SetName_eventID("EventID");
  // EXAMPLE: How to load different vars for source and bkg, if necessary
  //  dsBkg->tree->SetAlias("myRecoSigmaDeg","pf32SigmaDeg")
  //  dsSrc->tree->SetAlias("myRecoSigmaDeg","pf32SigmaDeg*1.4");
  //  evLoader.SetName_sigmaDeg("myRecoSigmaDeg");


  // The choice here has consequences for how to fill eProb, below
  if (1) { TString energyVar = "NChan"; }
  if (0) { TString energyVar = "log10(mueEn)"; }

  ark.evLoader.SetName_energyValue(energyVar);


  //
  // LOAD EVENTS, SET UP ENERGY PDFs
  // 

  cout << "Loading Background Events: " << ark.evLoader.GetBkgTree()->GetTitle() << endl;
  cout << "Using cut: " << ark.evLoader.GetCuts().GetTitle() << endl;
  ark.evLoader.LoadBkgEvents(ark.baseEvents);

  ark.eProb = new SimpleEnergyProb();

  cout << "Filling Energy PDFs:\n";
  if (0) { } // default for constraining signal inside histogram is now true
  if (1) { ark.eProb->SetConstrainSignal(false); }  // the old way

  if (energyVar == "NChan") {
    int nBackFill = 6; // don't backfill previous bins
    ark.eProb->SetEnergyGammaRangeAndBackFill(50,0.,200., 30,1.,4., nBackFill);
  }
  if (energyVar == "log10(mueEn)") {
    int nBackFill = 10; // don't backfill previous bins
    ark.eProb->SetEnergyGammaRangeAndBackFill(40,2.,9., 30,1.,4., nBackFill);
  }

  ark.eProb->SetTableBkg(ark.baseEvents);
  ark.eProb->SetTableGamma(ark.evLoader.GetSourceTree(), ark.evLoader.GetCuts(), energyVar);


  ark.decBkgProb.Initialize(180,1);
  // This seems to be okay for ~ 5000 events or more.

  ark.decBkgProb.SetBaseDecMap(ark.baseEvents);

  
  psData = new I3Analysis();

  psData->SetBkgSpaceProb(ark.decBkgProb);
  psData->SetBaseEvents(ark.baseEvents);
  psData->SetEnergyProb(*(ark.eProb));

  if (opt_UseRealData) {
    psData->UseRealData();  // the event set is now exactly equal
    // to the data set (i.e. no scrambling, no fake signal added.)
  } else {
    psData->GenerateDataSet_with_nSrcEvents(0);
  }

  ark.psData = psData;

  cout << "----- IC-22 Loaded -----\n";
}
